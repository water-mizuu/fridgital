{
    "sourceFile": "lib/widgets/shared/helper/listenable_animated_widget/animated_transform.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1698818291425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1698818291425,
            "name": "Commit-0",
            "content": "import \"package:flutter/material.dart\";\r\nimport \"package:fridgital/widgets/shared/helper/listenable_animated_widget/listenable_animated_widget.dart\";\r\n\r\nclass AnimatedTransform extends ListenableImplicitlyAnimatedWidget {\r\n  // ignore: unreachable_from_main\r\n  const AnimatedTransform({\r\n    required this.transform,\r\n    required this.child,\r\n    required super.duration,\r\n    super.curve,\r\n    super.key,\r\n    super.onForward,\r\n    super.onReverse,\r\n    super.onDismiss,\r\n    super.onEnd,\r\n    this.origin,\r\n    this.alignment,\r\n    this.transformHitTests = true,\r\n    this.filterQuality,\r\n  });\r\n\r\n  AnimatedTransform.translate({\r\n    required Offset offset,\r\n    required super.duration,\r\n    super.curve,\r\n    super.key,\r\n    super.onForward,\r\n    super.onReverse,\r\n    super.onDismiss,\r\n    super.onEnd,\r\n    this.transformHitTests = true,\r\n    this.filterQuality,\r\n    this.child,\r\n  })  : transform = Matrix4.translationValues(offset.dx, offset.dy, 0.0),\r\n        origin = null,\r\n        alignment = null;\r\n\r\n  final Matrix4 transform;\r\n  final Offset? origin;\r\n  final AlignmentGeometry? alignment;\r\n  final bool transformHitTests;\r\n  final FilterQuality? filterQuality;\r\n  final Widget? child;\r\n\r\n  @override\r\n  AnimatedTransformState createState() => AnimatedTransformState();\r\n}\r\n\r\nfinal class AnimatedTransformState extends ListenableAnimatedWidgetBaseState<AnimatedTransform> {\r\n  Matrix4Tween? transform;\r\n  Tween<Offset>? origin;\r\n  AlignmentGeometryTween? alignment;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    var animation = this.animation;\r\n\r\n    return Transform(\r\n      transform: transform!.evaluate(animation),\r\n      origin: origin?.evaluate(animation),\r\n      alignment: alignment?.evaluate(animation),\r\n      transformHitTests: widget.transformHitTests,\r\n      filterQuality: widget.filterQuality,\r\n      child: widget.child,\r\n    );\r\n  }\r\n\r\n  @override\r\n  void forEachTween(TweenVisitor<Object?> visitor) {\r\n    transform = visitor(\r\n      transform,\r\n      widget.transform,\r\n      (value) => Matrix4Tween(begin: value as Matrix4?),\r\n    ) as Matrix4Tween?;\r\n\r\n    origin = visitor(\r\n      origin,\r\n      widget.origin,\r\n      (value) => Tween<Offset>(begin: value as Offset?),\r\n    ) as Tween<Offset>?;\r\n\r\n    alignment = visitor(\r\n      alignment,\r\n      widget.alignment,\r\n      (value) => AlignmentGeometryTween(begin: value as AlignmentGeometry?),\r\n    ) as AlignmentGeometryTween?;\r\n  }\r\n}\r\n"
        }
    ]
}