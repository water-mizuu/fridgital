{
    "sourceFile": "lib/widgets/shared/miscellaneous/widgets/shrinking_navigation.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1700406225765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1700406225765,
            "name": "Commit-0",
            "content": "import \"dart:ui\";\r\n\r\nimport \"package:flutter/material.dart\";\r\nimport \"package:fridgital/icons/figma_icon_font.dart\";\r\nimport \"package:fridgital/shared/constants.dart\";\r\nimport \"package:fridgital/shared/extensions/find_box.dart\";\r\nimport \"package:fridgital/shared/extensions/normalize_number.dart\";\r\nimport \"package:fridgital/widgets/inherited_widgets/route_state.dart\";\r\nimport \"package:fridgital/widgets/shared/helper/invisible.dart\";\r\nimport \"package:fridgital/widgets/shared/miscellaneous/widgets/clickable_widget.dart\";\r\n\r\nconst indicator = (width: 16.0, height: 4.0);\r\nconst retractDuration = Duration(milliseconds: 125);\r\nconst iconSize = 32.0;\r\nconst margin = 20.0;\r\nconst padding = 8.0;\r\n\r\nconst retractedSize = iconSize + padding * 2;\r\n\r\nclass ShrinkingNavigation extends StatefulWidget {\r\n  const ShrinkingNavigation({\r\n    required this.controller,\r\n    required this.latestScrollOffset,\r\n    super.key,\r\n  });\r\n\r\n  final TabController controller;\r\n  final ValueNotifier<double> latestScrollOffset;\r\n\r\n  @override\r\n  State<ShrinkingNavigation> createState() => _ShrinkingNavigationState();\r\n}\r\n\r\nclass _ShrinkingNavigationState extends State<ShrinkingNavigation> {\r\n  /// State declared before [initState]\r\n  var retractedOffset = Offset.zero;\r\n\r\n  final isRetracted = ValueNotifier<bool>(false);\r\n  final parentKey = GlobalKey();\r\n  final retractedKey = GlobalKey();\r\n  final expandedKey = GlobalKey();\r\n  final indicatorKeys = List.generate(4, (_) => GlobalKey());\r\n\r\n  /// State declared on demand.\r\n  late final routePopNotifier = RouteState.of(context).popNotifier;\r\n\r\n  void updateRetracted() {\r\n    if (widget.latestScrollOffset.value case (<= -15.0 || >= 15.0) && var value) {\r\n      isRetracted.value = value >= 0.0;\r\n    }\r\n  }\r\n\r\n  @override\r\n  void didUpdateWidget(covariant ShrinkingNavigation oldWidget) {\r\n    if (oldWidget.latestScrollOffset != widget.latestScrollOffset) {\r\n      oldWidget.latestScrollOffset.removeListener(updateRetracted);\r\n      widget.latestScrollOffset.addListener(updateRetracted);\r\n    }\r\n\r\n    super.didUpdateWidget(oldWidget);\r\n  }\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n\r\n    widget.latestScrollOffset.addListener(updateRetracted);\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    widget.latestScrollOffset.removeListener(updateRetracted);\r\n\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    var width = MediaQuery.sizeOf(context).width - margin * 2;\r\n\r\n    return ListenableBuilder(\r\n      listenable: widget.controller,\r\n      builder: (context, child) => Padding(\r\n        padding: const EdgeInsets.all(margin),\r\n        child: Stack(\r\n          alignment: Alignment.centerRight,\r\n          children: [\r\n            /// Actual displayed.\r\n            NotificationListener<_ToggleRetractionNotification>(\r\n              onNotification: (notification) {\r\n                isRetracted.value = !isRetracted.value;\r\n                return true;\r\n              },\r\n              child: _NavigationBarBody(\r\n                isRetracted: isRetracted,\r\n                width: width,\r\n                parentKey: parentKey,\r\n                expandedKey: expandedKey,\r\n                retractedKey: retractedKey,\r\n                indicatorKeys: indicatorKeys,\r\n                controller: widget.controller,\r\n              ),\r\n            ),\r\n\r\n            /// Evaluated if the navigation is retracted\r\n            _RetractedBasis(width: width, retractedKey: retractedKey),\r\n\r\n            /// Evaluated if the navigation is not retracted\r\n            _ExpandedBasis(width: width, expandedKey: expandedKey),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass _NavigationBarBody extends StatefulWidget {\r\n  const _NavigationBarBody({\r\n    required this.isRetracted,\r\n    required this.width,\r\n    required this.parentKey,\r\n    required this.expandedKey,\r\n    required this.retractedKey,\r\n    required this.indicatorKeys,\r\n    required this.controller,\r\n  });\r\n\r\n  final ValueNotifier<bool> isRetracted;\r\n  final double width;\r\n\r\n  final GlobalKey parentKey;\r\n  final GlobalKey expandedKey;\r\n  final GlobalKey retractedKey;\r\n  final List<GlobalKey> indicatorKeys;\r\n\r\n  final TabController controller;\r\n\r\n  @override\r\n  State<_NavigationBarBody> createState() => _NavigationBarBodyState();\r\n}\r\n\r\nclass _NavigationBarBodyState extends State<_NavigationBarBody> with TickerProviderStateMixin {\r\n  late final AnimationController retractionController;\r\n\r\n  void _valueChanged() {\r\n    if (widget.isRetracted.value) {\r\n      retractionController.forward(from: 0.0);\r\n    } else {\r\n      retractionController.reverse(from: 1.0);\r\n    }\r\n  }\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n\r\n    retractionController = AnimationController(vsync: this, duration: retractDuration);\r\n    widget.isRetracted.addListener(_valueChanged);\r\n  }\r\n\r\n  @override\r\n  void didUpdateWidget(_NavigationBarBody oldWidget) {\r\n    super.didUpdateWidget(oldWidget);\r\n\r\n    assert(widget.parentKey == oldWidget.parentKey, \"The parent key cannot change.\");\r\n    assert(widget.expandedKey == oldWidget.expandedKey, \"The expanded key cannot change.\");\r\n    assert(widget.retractedKey == oldWidget.retractedKey, \"The retracted key cannot change.\");\r\n    assert(widget.indicatorKeys == oldWidget.indicatorKeys, \"The indicator keys cannot change.\");\r\n\r\n    if (oldWidget.isRetracted != widget.isRetracted) {\r\n      oldWidget.isRetracted.removeListener(_valueChanged);\r\n      widget.isRetracted.addListener(_valueChanged);\r\n    }\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    widget.isRetracted.removeListener(_valueChanged);\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return AnimatedBuilder(\r\n      animation: retractionController,\r\n      builder: (context, child) => Container(\r\n        width: lerpDouble(widget.width, retractedSize, retractionController.value),\r\n        decoration: BoxDecoration(\r\n          color: FigmaColors.whiteAccent,\r\n          borderRadius: BorderRadius.circular(256.0),\r\n        ),\r\n        child: child,\r\n      ),\r\n      child: Stack(\r\n        children: [\r\n          UnconstrainedBox(\r\n            key: widget.parentKey,\r\n            constrainedAxis: Axis.vertical,\r\n            alignment: Alignment.centerRight,\r\n            clipBehavior: Clip.hardEdge,\r\n            child: SizedBox(\r\n              width: widget.width,\r\n              child: AnimatedBuilder(\r\n                animation: retractionController,\r\n                builder: (context, child) {\r\n                  var expanded = widget.expandedKey.renderBoxNullable?.offset;\r\n                  var retracted = widget.retractedKey.renderBoxNullable?.offset;\r\n\r\n                  if (expanded != null && retracted != null) {\r\n                    child = Transform.translate(\r\n                      offset: Offset.lerp(Offset.zero, retracted - expanded, retractionController.value)!,\r\n                      child: child,\r\n                    );\r\n                  }\r\n\r\n                  return child!;\r\n                },\r\n                child: Row(\r\n                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n                  children: [\r\n                    for (int i = 0; i < 4; ++i) _NavigationIcon(i: i, widget: widget),\r\n                    ClickableWidget(\r\n                      onTap: () {\r\n                        _ToggleRetractionNotification().dispatch(context);\r\n                      },\r\n                      child: const SizedBox(\r\n                        width: iconSize,\r\n                        height: iconSize,\r\n                        child: Icon(\r\n                          Icons.menu,\r\n                          size: iconSize,\r\n                          color: FigmaColors.pinkAccent,\r\n                        ),\r\n                      ),\r\n                    ),\r\n                  ],\r\n                ),\r\n              ),\r\n            ),\r\n          ),\r\n\r\n          /// We only render this if we are moving.\r\n          if (widget.controller.animation case Animation<double> animation when widget.controller.indexIsChanging)\r\n            IgnorePointer(\r\n              child: ValueListenableBuilder(\r\n                valueListenable: animation,\r\n                builder: (context, value, child) {\r\n                  var TabController(:index, :previousIndex) = widget.controller;\r\n                  var parentBox = widget.parentKey.renderBox;\r\n                  var offset = Offset.lerp(\r\n                    widget.indicatorKeys[previousIndex].renderBox.offsetFrom(parentBox),\r\n                    widget.indicatorKeys[index].renderBox.offsetFrom(parentBox),\r\n                    value.normalize(between: previousIndex, and: index),\r\n                  );\r\n\r\n                  return offset != null && offset != Offset.zero\r\n                      ? Transform.translate(offset: offset, child: child)\r\n                      : Opacity(opacity: 0.0, child: child);\r\n                },\r\n                child: Container(\r\n                  width: indicator.width,\r\n                  height: indicator.height,\r\n                  decoration: BoxDecoration(\r\n                    color: FigmaColors.pinkAccent,\r\n                    borderRadius: BorderRadius.circular(256.0),\r\n                  ),\r\n                ),\r\n              ),\r\n            ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass _NavigationIcon extends StatelessWidget {\r\n  const _NavigationIcon({required this.i, required this.widget});\r\n\r\n  final int i;\r\n  final _NavigationBarBody widget;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Stack(\r\n      children: [\r\n        Padding(\r\n          padding: const EdgeInsets.symmetric(vertical: padding),\r\n          child: ClickableWidget(\r\n            onTap: () {\r\n              ShrinkingNavigationUpdateNotification(i).dispatch(context);\r\n            },\r\n            child: SizedBox(\r\n              height: iconSize,\r\n              width: iconSize,\r\n              child: Icon(\r\n                const [FigmaIconFont.book, FigmaIconFont.fridge, Icons.home_outlined, Icons.list_alt_outlined][i],\r\n                size: iconSize,\r\n                color: FigmaColors.pinkAccent,\r\n              ),\r\n            ),\r\n          ),\r\n        ),\r\n        Positioned(\r\n          bottom: 0,\r\n          child: _NavigationIndicator(\r\n            index: i,\r\n            indicatorKey: widget.indicatorKeys[i],\r\n            controller: widget.controller,\r\n          ),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n}\r\n\r\nclass _NavigationIndicator extends StatelessWidget {\r\n  const _NavigationIndicator({required this.indicatorKey, required this.index, required this.controller});\r\n\r\n  final TabController controller;\r\n  final GlobalKey indicatorKey;\r\n  final int index;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Opacity(\r\n      opacity: controller.indexIsChanging || controller.index != index ? 0.0 : 1.0,\r\n      child: SizedBox(\r\n        width: iconSize,\r\n        height: iconSize,\r\n        child: Column(\r\n          mainAxisAlignment: MainAxisAlignment.end,\r\n          children: [\r\n            Container(\r\n              key: indicatorKey,\r\n              width: indicator.width,\r\n              height: indicator.height,\r\n              decoration: BoxDecoration(\r\n                color: FigmaColors.pinkAccent,\r\n                borderRadius: BorderRadius.circular(256.0),\r\n              ),\r\n            ),\r\n            const SizedBox(height: 2.0),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass _ExpandedBasis extends StatelessWidget {\r\n  const _ExpandedBasis({required this.width, required this.expandedKey});\r\n\r\n  final double width;\r\n  final GlobalKey expandedKey;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Invisible(\r\n      child: Padding(\r\n        padding: const EdgeInsets.symmetric(vertical: padding),\r\n        child: SizedBox(\r\n          width: width,\r\n          child: Row(\r\n            mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n            children: [\r\n              for (int i = 0; i < 4; ++i) const SizedBox(height: iconSize, width: iconSize),\r\n              Icon(null, size: iconSize, key: expandedKey),\r\n            ],\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass _RetractedBasis extends StatelessWidget {\r\n  const _RetractedBasis({required this.width, required this.retractedKey});\r\n\r\n  final double width;\r\n  final GlobalKey retractedKey;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Invisible(\r\n      child: Container(\r\n        padding: const EdgeInsets.all(padding),\r\n        width: retractedSize,\r\n        child: SizedBox(\r\n          width: width,\r\n          child: Row(\r\n            mainAxisAlignment: MainAxisAlignment.end,\r\n            children: [\r\n              Icon(Icons.menu, size: iconSize, color: FigmaColors.pinkAccent, key: retractedKey),\r\n            ],\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\n/// NOTIFICATIONS USED WITHIN THIS FILE\r\n\r\nclass ShrinkingNavigationUpdateNotification extends Notification {\r\n  const ShrinkingNavigationUpdateNotification(this.index);\r\n  final int index;\r\n}\r\n\r\nclass _ToggleRetractionNotification extends Notification {}\r\n"
        }
    ]
}