{
    "sourceFile": "lib/widgets/shared/miscellaneous/widgets/tags_view/tags_view.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1700406225746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1700406225746,
            "name": "Commit-0",
            "content": "// TODO(water-mizuu): Refactor this whole file.\r\n\r\nimport \"package:flutter/material.dart\";\r\nimport \"package:fridgital/back_end/tag_data.dart\";\r\nimport \"package:fridgital/shared/constants.dart\";\r\nimport \"package:fridgital/shared/extensions/color_conversion.dart\";\r\nimport \"package:fridgital/widgets/shared/miscellaneous/widgets/clickable_widget.dart\";\r\nimport \"package:fridgital/widgets/shared/miscellaneous/widgets/tags_view/notifications.dart\";\r\nimport \"package:fridgital/widgets/shared/miscellaneous/widgets/tags_view/overlay_holder.dart\";\r\nimport \"package:provider/provider.dart\";\r\n\r\nconst _tagIconSize = 14.0;\r\nconst _tagHeight = 32.0;\r\nconst _tagGapToIcon = 16.0;\r\n\r\nclass TagsView extends StatelessWidget {\r\n  const TagsView({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    var tagData = context.watch<TagData>();\r\n\r\n    return Wrap(\r\n      runSpacing: 8.0,\r\n      children: [\r\n        for (var tag in tagData.activeTags)\r\n          Padding(\r\n            padding: const EdgeInsets.only(right: 4.0),\r\n            child: TagWidget(\r\n              tag: tag,\r\n              onTap: () {\r\n                tagData.removeTag(tag);\r\n              },\r\n            ),\r\n          ),\r\n        const Padding(\r\n          padding: EdgeInsets.only(right: 4.0),\r\n          child: TagSelector(),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n}\r\n\r\nenum OverlayMode {\r\n  select,\r\n  add,\r\n  selectDelete,\r\n  selectEdit,\r\n  edit,\r\n}\r\n\r\nclass TagSelector extends StatefulWidget {\r\n  const TagSelector({super.key});\r\n\r\n  @override\r\n  State<TagSelector> createState() => _TagSelectorState();\r\n}\r\n\r\nclass _TagSelectorState extends State<TagSelector> {\r\n  void Function() tapHandler(BuildContext context) {\r\n    return () {\r\n      if (!context.mounted) {\r\n        return;\r\n      }\r\n\r\n      OverlayEntry? entry;\r\n\r\n      entry = OverlayEntry(\r\n        maintainState: true,\r\n        builder: (_) => ChangeNotifierProvider.value(\r\n          value: context.read<TagData>(),\r\n          child: NotificationListener<CloseOverlayNotification>(\r\n            onNotification: (notification) {\r\n              entry?.remove();\r\n              return true;\r\n            },\r\n            child: const OverlayHolder(),\r\n          ),\r\n        ),\r\n      );\r\n\r\n      Overlay.of(context).insert(entry);\r\n    };\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ClipRRect(\r\n      borderRadius: BorderRadius.circular(16.0),\r\n      child: ClickableWidget(\r\n        onTap: tapHandler(context),\r\n        child: Container(\r\n          height: _tagHeight,\r\n          color: TagColors.selector,\r\n          padding: const EdgeInsets.symmetric(horizontal: 16.0),\r\n          child: const IgnorePointer(\r\n            child: Row(\r\n              mainAxisSize: MainAxisSize.min,\r\n              children: [\r\n                Text(\"filter\", style: TextStyle(color: Colors.white)),\r\n                SizedBox(width: _tagGapToIcon),\r\n                Icon(Icons.add, size: _tagIconSize, color: Colors.white),\r\n              ],\r\n            ),\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\n/// Represents a simple removable tag that is composed of only an icon.\r\nclass IconWidget extends StatelessWidget {\r\n  const IconWidget({required this.color, required this.icon, super.key, this.onTap});\r\n\r\n  final Color color;\r\n  final IconData? icon;\r\n  final void Function()? onTap;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ClipRRect(\r\n      borderRadius: BorderRadius.circular(16.0),\r\n      child: ClickableWidget(\r\n        onTap: onTap,\r\n        child: Container(\r\n          color: color,\r\n          height: _tagHeight,\r\n          padding: const EdgeInsets.symmetric(horizontal: 16.0),\r\n          child: Icon(icon, size: _tagIconSize, color: Colors.white),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\n/// Represents a simple removable tag that is composed of text with an optional icon.\r\nclass TagWidget extends StatelessWidget {\r\n  const TagWidget({required this.tag, super.key, this.icon = Icons.close, this.onTap, this.enabled = true});\r\n\r\n  final Tag tag;\r\n  final IconData? icon;\r\n  final void Function()? onTap;\r\n  final bool enabled;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    var backgroundColor = enabled ? tag.color : tag.color.desaturate(0.65);\r\n    var textColor = enabled ? Colors.white : Colors.white.dim(0.25);\r\n\r\n    return ClipRRect(\r\n      borderRadius: BorderRadius.circular(16.0),\r\n      child: ClickableWidget(\r\n        cursor: enabled ? SystemMouseCursors.click : MouseCursor.defer,\r\n        onTap: enabled ? onTap : () => (),\r\n        child: SizedBox(\r\n          height: _tagHeight,\r\n          child: Material(\r\n            color: backgroundColor,\r\n            child: Padding(\r\n              padding: const EdgeInsets.symmetric(horizontal: 16.0),\r\n              child: icon == null\r\n                  ? Row(\r\n                      mainAxisSize: MainAxisSize.min,\r\n                      children: [Text(tag.name, style: TextStyle(color: textColor))],\r\n                    )\r\n                  : Row(\r\n                      mainAxisSize: MainAxisSize.min,\r\n                      children: [\r\n                        Text(tag.name, style: TextStyle(color: textColor)),\r\n                        const SizedBox(width: _tagGapToIcon),\r\n                        Icon(icon, size: _tagIconSize, color: textColor),\r\n                      ],\r\n                    ),\r\n            ),\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}