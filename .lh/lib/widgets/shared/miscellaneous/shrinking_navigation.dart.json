{
    "sourceFile": "lib/widgets/shared/miscellaneous/shrinking_navigation.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1698745464139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1698747733766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n     const padding = 8.0;\r\n     const indicator = (width: 16.0, height: 4.0);\r\n \r\n     var activeIndex = TabInformation.of(context).index;\r\n-    var width = MediaQuery.sizeOf(context).width - margin * 2 - padding * 2;\r\n+    var width = MediaQuery.sizeOf(context).width;\r\n     var arbitraryRetracted = iconSize + padding * 2;\r\n \r\n     return Padding(\r\n       padding: const EdgeInsets.all(margin),\r\n"
                },
                {
                    "date": 1698747870487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -216,9 +216,9 @@\n                           child: MouseRegion(\r\n                             cursor: SystemMouseCursors.click,\r\n                             child: GestureDetector(\r\n                               onTap: toggleRetracted,\r\n-                              child: const Icon(Icons.menu, size: iconSize, color: FigmaColors.pinkAccent),\r\n+                              child: ,\r\n                             ),\r\n                           ),\r\n                         ),\r\n                       ],\r\n"
                },
                {
                    "date": 1698747906707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n     const padding = 8.0;\r\n     const indicator = (width: 16.0, height: 4.0);\r\n \r\n     var activeIndex = TabInformation.of(context).index;\r\n-    var width = MediaQuery.sizeOf(context).width;\r\n+    var width = MediaQuery.sizeOf(context).width - margin * 2;\r\n     var arbitraryRetracted = iconSize + padding * 2;\r\n \r\n     return Padding(\r\n       padding: const EdgeInsets.all(margin),\r\n@@ -154,9 +154,9 @@\n           ),\r\n \r\n           /// Actual displayed.\r\n           AnimatedContainer(\r\n-            padding: const EdgeInsets.all(padding),\r\n+            // padding: const EdgeInsets.all(padding),\r\n             decoration: BoxDecoration(\r\n               color: FigmaColors.whiteAccent,\r\n               borderRadius: BorderRadius.circular(256.0),\r\n             ),\r\n@@ -191,9 +191,9 @@\n                               },\r\n                               child: Container(\r\n                                 height: iconSize,\r\n                                 width: iconSize,\r\n-                                color: Colors.transparent,\r\n+                                color: Colors.green,\r\n                                 key: navigationKeys[i],\r\n                                 child: Center(\r\n                                   child: Icon(\r\n                                     const [\r\n@@ -216,9 +216,14 @@\n                           child: MouseRegion(\r\n                             cursor: SystemMouseCursors.click,\r\n                             child: GestureDetector(\r\n                               onTap: toggleRetracted,\r\n-                              child: ,\r\n+                              child: Container(\r\n+                                width: iconSize,\r\n+                                height: iconSize,\r\n+                                color: Colors.green,\r\n+                                child: const Icon(Icons.menu, size: iconSize, color: FigmaColors.pinkAccent),\r\n+                              ),\r\n                             ),\r\n                           ),\r\n                         ),\r\n                       ],\r\n"
                },
                {
                    "date": 1698747936792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,9 +154,9 @@\n           ),\r\n \r\n           /// Actual displayed.\r\n           AnimatedContainer(\r\n-            // padding: const EdgeInsets.all(padding),\r\n+            padding: const EdgeInsets.symmetric(vertical: padding),\r\n             decoration: BoxDecoration(\r\n               color: FigmaColors.whiteAccent,\r\n               borderRadius: BorderRadius.circular(256.0),\r\n             ),\r\n@@ -191,9 +191,9 @@\n                               },\r\n                               child: Container(\r\n                                 height: iconSize,\r\n                                 width: iconSize,\r\n-                                color: Colors.green,\r\n+                                color: Colors.trans,\r\n                                 key: navigationKeys[i],\r\n                                 child: Center(\r\n                                   child: Icon(\r\n                                     const [\r\n"
                },
                {
                    "date": 1698747967469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n           IgnorePointer(\r\n             child: Opacity(\r\n               opacity: ghostOpacity,\r\n               child: Container(\r\n-                padding: const EdgeInsets.all(padding),\r\n+                padding: const EdgeInsets.symmetric(vertical: padding),\r\n                 width: arbitraryRetracted,\r\n                 child: UnconstrainedBox(\r\n                   constrainedAxis: Axis.vertical,\r\n                   alignment: Alignment.centerRight,\r\n@@ -131,9 +131,9 @@\n           IgnorePointer(\r\n             child: Opacity(\r\n               opacity: ghostOpacity,\r\n               child: Container(\r\n-                padding: const EdgeInsets.all(padding),\r\n+                padding: const EdgeInsets.symmetric(vertical: padding),\r\n                 width: width,\r\n                 child: UnconstrainedBox(\r\n                   constrainedAxis: Axis.vertical,\r\n                   alignment: Alignment.centerRight,\r\n@@ -191,9 +191,9 @@\n                               },\r\n                               child: Container(\r\n                                 height: iconSize,\r\n                                 width: iconSize,\r\n-                                color: Colors.trans,\r\n+                                color: Colors.transparent,\r\n                                 key: navigationKeys[i],\r\n                                 child: Center(\r\n                                   child: Icon(\r\n                                     const [\r\n@@ -219,9 +219,8 @@\n                               onTap: toggleRetracted,\r\n                               child: Container(\r\n                                 width: iconSize,\r\n                                 height: iconSize,\r\n-                                color: Colors.green,\r\n                                 child: const Icon(Icons.menu, size: iconSize, color: FigmaColors.pinkAccent),\r\n                               ),\r\n                             ),\r\n                           ),\r\n"
                },
                {
                    "date": 1698748022549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n           IgnorePointer(\r\n             child: Opacity(\r\n               opacity: ghostOpacity,\r\n               child: Container(\r\n-                padding: const EdgeInsets.symmetric(vertical: padding),\r\n+                padding: const EdgeInsets.all(padding),\r\n                 width: arbitraryRetracted,\r\n                 child: UnconstrainedBox(\r\n                   constrainedAxis: Axis.vertical,\r\n                   alignment: Alignment.centerRight,\r\n@@ -182,46 +182,21 @@\n                     child: Row(\r\n                       mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n                       children: [\r\n                         for (int i in 4.times)\r\n-                          MouseRegion(\r\n-                            cursor: SystemMouseCursors.click,\r\n-                            child: GestureDetector(\r\n-                              onTap: () {\r\n-                                ShrinkingNavigationUpdateNotification(i).dispatch(context);\r\n-                              },\r\n-                              child: Container(\r\n-                                height: iconSize,\r\n-                                width: iconSize,\r\n-                                color: Colors.transparent,\r\n-                                key: navigationKeys[i],\r\n-                                child: Center(\r\n-                                  child: Icon(\r\n-                                    const [\r\n-                                      FigmaIconFont.book,\r\n-                                      FigmaIconFont.fridge,\r\n-                                      Icons.home_outlined,\r\n-                                      Icons.list_alt_outlined,\r\n-                                    ][i],\r\n-                                    size: iconSize,\r\n-                                    color: FigmaColors.pinkAccent,\r\n-                                  ),\r\n-                                ),\r\n-                              ),\r\n-                            ),\r\n-                          ),\r\n+                          ,\r\n                         AnimatedTransform.translate(\r\n                           duration: retractDuration,\r\n                           offset: isRetracted ? -retractedOffset : Offset.zero,\r\n                           curve: Curves.fastOutSlowIn,\r\n                           child: MouseRegion(\r\n                             cursor: SystemMouseCursors.click,\r\n                             child: GestureDetector(\r\n                               onTap: toggleRetracted,\r\n-                              child: Container(\r\n+                              child: const SizedBox(\r\n                                 width: iconSize,\r\n                                 height: iconSize,\r\n-                                child: const Icon(Icons.menu, size: iconSize, color: FigmaColors.pinkAccent),\r\n+                                child: Icon(Icons.menu, size: iconSize, color: FigmaColors.pinkAccent),\r\n                               ),\r\n                             ),\r\n                           ),\r\n                         ),\r\n"
                },
                {
                    "date": 1698748186504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,9 +182,39 @@\n                     child: Row(\r\n                       mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n                       children: [\r\n                         for (int i in 4.times)\r\n-                          ,\r\n+                          AnimatedTransform.translate(\r\n+                            duration: retractDuration,\r\n+                            // offset: isRetracted ? -retractedOffset : Offset.zero,\r\n+                            curve: Curves.fastOutSlowIn,\r\n+                            child: MouseRegion(\r\n+                              cursor: SystemMouseCursors.click,\r\n+                              child: GestureDetector(\r\n+                                onTap: () {\r\n+                                  ShrinkingNavigationUpdateNotification(i).dispatch(context);\r\n+                                },\r\n+                                child: Container(\r\n+                                  height: iconSize,\r\n+                                  width: iconSize,\r\n+                                  color: Colors.transparent,\r\n+                                  key: navigationKeys[i],\r\n+                                  child: Center(\r\n+                                    child: Icon(\r\n+                                      const [\r\n+                                        FigmaIconFont.book,\r\n+                                        FigmaIconFont.fridge,\r\n+                                        Icons.home_outlined,\r\n+                                        Icons.list_alt_outlined,\r\n+                                      ][i],\r\n+                                      size: iconSize,\r\n+                                      color: FigmaColors.pinkAccent,\r\n+                                    ),\r\n+                                  ),\r\n+                                ),\r\n+                              ),\r\n+                            ),\r\n+                          ),\r\n                         AnimatedTransform.translate(\r\n                           duration: retractDuration,\r\n                           offset: isRetracted ? -retractedOffset : Offset.zero,\r\n                           curve: Curves.fastOutSlowIn,\r\n"
                },
                {
                    "date": 1698748247594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,9 +184,10 @@\n                       children: [\r\n                         for (int i in 4.times)\r\n                           AnimatedTransform.translate(\r\n                             duration: retractDuration,\r\n-                            // offset: isRetracted ? -retractedOffset : Offset.zero,\r\n+                            offset: Offset.zero,\r\n+                            offset: isRetracted ? -retractedOffset : Offset.zero,\r\n                             curve: Curves.fastOutSlowIn,\r\n                             child: MouseRegion(\r\n                               cursor: SystemMouseCursors.click,\r\n                               child: GestureDetector(\r\n"
                },
                {
                    "date": 1698748521267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,12 +184,12 @@\n                       children: [\r\n                         for (int i in 4.times)\r\n                           AnimatedTransform.translate(\r\n                             duration: retractDuration,\r\n-                            offset: Offset.zero,\r\n                             offset: isRetracted ? -retractedOffset : Offset.zero,\r\n                             curve: Curves.fastOutSlowIn,\r\n-                            child: MouseRegion(\r\n+                            child: \r\n+                            MouseRegion(\r\n                               cursor: SystemMouseCursors.click,\r\n                               child: GestureDetector(\r\n                                 onTap: () {\r\n                                   ShrinkingNavigationUpdateNotification(i).dispatch(context);\r\n"
                },
                {
                    "date": 1698748551305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import \"package:fridgital/shared/constants.dart\";\r\n import \"package:fridgital/shared/extensions/times.dart\";\r\n import \"package:fridgital/widgets/inherited_widgets/tab_information.dart\";\r\n import \"package:fridgital/widgets/shared/helper/animated_transform.dart\";\r\n+import \"package:fridgital/widgets/shared/miscellaneous/clickable_widget.dart\";\r\n \r\n class ShrinkingNavigation extends StatefulWidget {\r\n   const ShrinkingNavigation({required this.latestScrollOffset, super.key});\r\n \r\n@@ -186,31 +187,27 @@\n                           AnimatedTransform.translate(\r\n                             duration: retractDuration,\r\n                             offset: isRetracted ? -retractedOffset : Offset.zero,\r\n                             curve: Curves.fastOutSlowIn,\r\n-                            child: \r\n-                            MouseRegion(\r\n-                              cursor: SystemMouseCursors.click,\r\n-                              child: GestureDetector(\r\n-                                onTap: () {\r\n-                                  ShrinkingNavigationUpdateNotification(i).dispatch(context);\r\n-                                },\r\n-                                child: Container(\r\n-                                  height: iconSize,\r\n-                                  width: iconSize,\r\n-                                  color: Colors.transparent,\r\n-                                  key: navigationKeys[i],\r\n-                                  child: Center(\r\n-                                    child: Icon(\r\n-                                      const [\r\n-                                        FigmaIconFont.book,\r\n-                                        FigmaIconFont.fridge,\r\n-                                        Icons.home_outlined,\r\n-                                        Icons.list_alt_outlined,\r\n-                                      ][i],\r\n-                                      size: iconSize,\r\n-                                      color: FigmaColors.pinkAccent,\r\n-                                    ),\r\n+                            child: ClickableWidget(\r\n+                              onTap: () {\r\n+                                ShrinkingNavigationUpdateNotification(i).dispatch(context);\r\n+                              },\r\n+                              child: Container(\r\n+                                height: iconSize,\r\n+                                width: iconSize,\r\n+                                color: Colors.transparent,\r\n+                                key: navigationKeys[i],\r\n+                                child: Center(\r\n+                                  child: Icon(\r\n+                                    const [\r\n+                                      FigmaIconFont.book,\r\n+                                      FigmaIconFont.fridge,\r\n+                                      Icons.home_outlined,\r\n+                                      Icons.list_alt_outlined,\r\n+                                    ][i],\r\n+                                    size: iconSize,\r\n+                                    color: FigmaColors.pinkAccent,\r\n                                   ),\r\n                                 ),\r\n                               ),\r\n                             ),\r\n@@ -218,41 +215,23 @@\n                         AnimatedTransform.translate(\r\n                           duration: retractDuration,\r\n                           offset: isRetracted ? -retractedOffset : Offset.zero,\r\n                           curve: Curves.fastOutSlowIn,\r\n-                          child: MouseRegion(\r\n-                            cursor: SystemMouseCursors.click,\r\n-                            child: GestureDetector(\r\n-                              onTap: toggleRetracted,\r\n-                              child: const SizedBox(\r\n-                                width: iconSize,\r\n-                                height: iconSize,\r\n-                                child: Icon(Icons.menu, size: iconSize, color: FigmaColors.pinkAccent),\r\n-                              ),\r\n+                          child: ClickableWidget(\r\n+                            onTap: toggleRetracted,\r\n+                            child: const SizedBox(\r\n+                              width: iconSize,\r\n+                              height: iconSize,\r\n+                              child: Icon(Icons.menu, size: iconSize, color: FigmaColors.pinkAccent),\r\n                             ),\r\n                           ),\r\n                         ),\r\n                       ],\r\n                     ),\r\n                   ),\r\n                 ),\r\n                 if (!isRetracted && hasComputedOffsets)\r\n-                  AnimatedTransform.translate(\r\n-                    offset: navigationOffsets[activeIndex],\r\n-                    duration: retractDuration,\r\n-                    curve: Curves.fastOutSlowIn,\r\n-                    child: Opacity(\r\n-                      opacity: isRetracted ? 0.0 : 1.0,\r\n-                      child: Container(\r\n-                        width: indicator.width,\r\n-                        height: indicator.height,\r\n-                        decoration: BoxDecoration(\r\n-                          color: FigmaColors.pinkAccent,\r\n-                          borderRadius: BorderRadius.circular(256.0),\r\n-                        ),\r\n-                      ),\r\n-                    ),\r\n-                  ),\r\n+                  IgnorePointer(child: ),\r\n               ],\r\n             ),\r\n           ),\r\n         ],\r\n"
                }
            ],
            "date": 1698745464139,
            "name": "Commit-0",
            "content": "import \"package:flutter/material.dart\";\r\nimport \"package:fridgital/icons/figma_icon_font.dart\";\r\nimport \"package:fridgital/shared/constants.dart\";\r\nimport \"package:fridgital/shared/extensions/times.dart\";\r\nimport \"package:fridgital/widgets/inherited_widgets/tab_information.dart\";\r\nimport \"package:fridgital/widgets/shared/helper/animated_transform.dart\";\r\n\r\nclass ShrinkingNavigation extends StatefulWidget {\r\n  const ShrinkingNavigation({required this.latestScrollOffset, super.key});\r\n\r\n  final ValueNotifier<double> latestScrollOffset;\r\n\r\n  @override\r\n  State<ShrinkingNavigation> createState() => _ShrinkingNavigationState();\r\n}\r\n\r\n/// I need help. I do not know of a better way to do this.\r\n/// It works, but I have to render three layers of the same widget\r\n/// to compute their offsets and then animate them.\r\n///\r\n/// I need tips.\r\nclass _ShrinkingNavigationState extends State<ShrinkingNavigation> with TickerProviderStateMixin {\r\n  bool isRetracted = false;\r\n\r\n  void updateRetracted() {\r\n    setState(() {\r\n      isRetracted = widget.latestScrollOffset.value > 0.0;\r\n    });\r\n  }\r\n\r\n  void toggleRetracted() {\r\n    setState(() => isRetracted = !isRetracted);\r\n  }\r\n\r\n  void updateOffsets() {\r\n    if (parentKey.currentContext?.findRenderObject() case RenderBox parentBox) {\r\n      for (var (i, key) in navigationKeys.indexed) {\r\n        if (key.currentContext?.findRenderObject() case RenderBox box) {\r\n          navigationOffsets[i] = box.localToGlobal(Offset.zero, ancestor: parentBox) +\r\n              Offset(0.0, box.size.height * 1.0625) +\r\n              Offset(box.size.width / 2, 0.0) +\r\n              const Offset(-8.0, 0.0);\r\n        }\r\n      }\r\n\r\n      /// Compute the difference.\r\n      if (retractedKey.currentContext?.findRenderObject() case RenderBox retractedBox) {\r\n        if (expandedKey.currentContext?.findRenderObject() case RenderBox expandedBox) {\r\n          retractedOffset = expandedBox.localToGlobal(Offset.zero) - retractedBox.localToGlobal(Offset.zero);\r\n        }\r\n      }\r\n\r\n      setState(() => hasComputedOffsets = true);\r\n    }\r\n  }\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n\r\n    widget.latestScrollOffset.addListener(updateRetracted);\r\n    WidgetsBinding.instance.addPostFrameCallback((_) {\r\n      updateOffsets();\r\n    });\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    widget.latestScrollOffset.removeListener(updateRetracted);\r\n\r\n    super.dispose();\r\n  }\r\n\r\n  bool hasComputedOffsets = false;\r\n  GlobalKey parentKey = GlobalKey();\r\n\r\n  GlobalKey retractedKey = GlobalKey();\r\n  GlobalKey expandedKey = GlobalKey();\r\n\r\n  Offset retractedOffset = Offset.zero;\r\n\r\n  List<Offset> navigationOffsets = List.generate(4, (_) => Offset.zero);\r\n  List<GlobalKey> navigationKeys = List.generate(4, (_) => GlobalKey());\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    const ghostOpacity = 0.00;\r\n    const retractDuration = Duration(milliseconds: 125);\r\n\r\n    const iconSize = 32.0;\r\n    const margin = 20.0;\r\n    const padding = 8.0;\r\n    const indicator = (width: 16.0, height: 4.0);\r\n\r\n    var activeIndex = TabInformation.of(context).index;\r\n    var width = MediaQuery.sizeOf(context).width - margin * 2 - padding * 2;\r\n    var arbitraryRetracted = iconSize + padding * 2;\r\n\r\n    return Padding(\r\n      padding: const EdgeInsets.all(margin),\r\n      child: Stack(\r\n        alignment: Alignment.centerRight,\r\n        children: [\r\n          /// Evaluated if the navigation is retracted\r\n          IgnorePointer(\r\n            child: Opacity(\r\n              opacity: ghostOpacity,\r\n              child: Container(\r\n                padding: const EdgeInsets.all(padding),\r\n                width: arbitraryRetracted,\r\n                child: UnconstrainedBox(\r\n                  constrainedAxis: Axis.vertical,\r\n                  alignment: Alignment.centerRight,\r\n                  clipBehavior: Clip.hardEdge,\r\n                  child: SizedBox(\r\n                    width: width,\r\n                    child: Row(\r\n                      mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n                      children: [\r\n                        for (void _ in 4.times) const SizedBox(height: iconSize, width: iconSize),\r\n                        Icon(Icons.menu, size: iconSize, color: FigmaColors.pinkAccent, key: retractedKey),\r\n                      ],\r\n                    ),\r\n                  ),\r\n                ),\r\n              ),\r\n            ),\r\n          ),\r\n\r\n          /// Evaluated if the navigation is not retracted\r\n          IgnorePointer(\r\n            child: Opacity(\r\n              opacity: ghostOpacity,\r\n              child: Container(\r\n                padding: const EdgeInsets.all(padding),\r\n                width: width,\r\n                child: UnconstrainedBox(\r\n                  constrainedAxis: Axis.vertical,\r\n                  alignment: Alignment.centerRight,\r\n                  clipBehavior: Clip.hardEdge,\r\n                  child: SizedBox(\r\n                    width: width,\r\n                    child: Row(\r\n                      mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n                      children: [\r\n                        for (var i = 0; i < 4; ++i) const SizedBox(height: iconSize, width: iconSize),\r\n                        Icon(null, size: iconSize, key: expandedKey),\r\n                      ],\r\n                    ),\r\n                  ),\r\n                ),\r\n              ),\r\n            ),\r\n          ),\r\n\r\n          /// Actual displayed.\r\n          AnimatedContainer(\r\n            padding: const EdgeInsets.all(padding),\r\n            decoration: BoxDecoration(\r\n              color: FigmaColors.whiteAccent,\r\n              borderRadius: BorderRadius.circular(256.0),\r\n            ),\r\n            onEnd: () {\r\n              WidgetsBinding.instance.addPostFrameCallback((_) {\r\n                if (!isRetracted) {\r\n                  updateOffsets();\r\n                }\r\n              });\r\n            },\r\n            duration: retractDuration,\r\n            width: isRetracted ? arbitraryRetracted : width,\r\n            curve: Curves.fastOutSlowIn,\r\n            child: Stack(\r\n              children: [\r\n                UnconstrainedBox(\r\n                  key: parentKey,\r\n                  constrainedAxis: Axis.vertical,\r\n                  alignment: Alignment.centerRight,\r\n                  clipBehavior: Clip.hardEdge,\r\n                  child: SizedBox(\r\n                    width: width,\r\n                    child: Row(\r\n                      mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n                      children: [\r\n                        for (int i in 4.times)\r\n                          MouseRegion(\r\n                            cursor: SystemMouseCursors.click,\r\n                            child: GestureDetector(\r\n                              onTap: () {\r\n                                ShrinkingNavigationUpdateNotification(i).dispatch(context);\r\n                              },\r\n                              child: Container(\r\n                                height: iconSize,\r\n                                width: iconSize,\r\n                                color: Colors.transparent,\r\n                                key: navigationKeys[i],\r\n                                child: Center(\r\n                                  child: Icon(\r\n                                    const [\r\n                                      FigmaIconFont.book,\r\n                                      FigmaIconFont.fridge,\r\n                                      Icons.home_outlined,\r\n                                      Icons.list_alt_outlined,\r\n                                    ][i],\r\n                                    size: iconSize,\r\n                                    color: FigmaColors.pinkAccent,\r\n                                  ),\r\n                                ),\r\n                              ),\r\n                            ),\r\n                          ),\r\n                        AnimatedTransform.translate(\r\n                          duration: retractDuration,\r\n                          offset: isRetracted ? -retractedOffset : Offset.zero,\r\n                          curve: Curves.fastOutSlowIn,\r\n                          child: MouseRegion(\r\n                            cursor: SystemMouseCursors.click,\r\n                            child: GestureDetector(\r\n                              onTap: toggleRetracted,\r\n                              child: const Icon(Icons.menu, size: iconSize, color: FigmaColors.pinkAccent),\r\n                            ),\r\n                          ),\r\n                        ),\r\n                      ],\r\n                    ),\r\n                  ),\r\n                ),\r\n                if (!isRetracted && hasComputedOffsets)\r\n                  AnimatedTransform.translate(\r\n                    offset: navigationOffsets[activeIndex],\r\n                    duration: retractDuration,\r\n                    curve: Curves.fastOutSlowIn,\r\n                    child: Opacity(\r\n                      opacity: isRetracted ? 0.0 : 1.0,\r\n                      child: Container(\r\n                        width: indicator.width,\r\n                        height: indicator.height,\r\n                        decoration: BoxDecoration(\r\n                          color: FigmaColors.pinkAccent,\r\n                          borderRadius: BorderRadius.circular(256.0),\r\n                        ),\r\n                      ),\r\n                    ),\r\n                  ),\r\n              ],\r\n            ),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nsealed class ShrinkingNavigationNotification extends Notification {}\r\n\r\nclass ShrinkingNavigationUpdateNotification extends ShrinkingNavigationNotification {\r\n  ShrinkingNavigationUpdateNotification(this.index);\r\n\r\n  final int index;\r\n}\r\n"
        }
    ]
}