{
    "sourceFile": "lib/widgets/shared/miscellaneous/tags_view/overlay_holder.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1700406080690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1700406138723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,156 @@\n-w\n\\ No newline at end of file\n+import \"dart:async\";\r\n+import \"dart:ui\";\r\n+\r\n+import \"package:flutter/material.dart\";\r\n+import \"package:fridgital/back_end/tag_data.dart\";\r\n+import \"package:fridgital/shared/extensions/time.dart\";\r\n+import \"package:fridgital/widgets/shared/miscellaneous/tags_view/notifications.dart\";\r\n+import \"package:fridgital/widgets/shared/miscellaneous/tags_view/tags_view.dart\";\r\n+import \"package:provider/provider.dart\";\r\n+\r\n+import \"overlays/select_tag_overlay.dart\";\r\n+\r\n+class OverlayHolder extends StatefulWidget {\r\n+  const OverlayHolder({super.key});\r\n+\r\n+  @override\r\n+  State<OverlayHolder> createState() => _OverlayHolderState();\r\n+}\r\n+\r\n+class _OverlayHolderState extends State<OverlayHolder> with TickerProviderStateMixin {\r\n+  late final AnimationController animationController;\r\n+  late final ValueNotifier<OverlayMode> overlayMode;\r\n+  late final ValueNotifier<CustomTag?> workingTag;\r\n+\r\n+  Future<void> transitionTo(OverlayMode mode) async {\r\n+    await animationController.reverse(from: 1.0);\r\n+    overlayMode.value = mode;\r\n+    await animationController.forward(from: 0.0);\r\n+  }\r\n+\r\n+  void handleNotification(OverlayNotification notification) async {\r\n+    var tagData = context.read<TagData>();\r\n+\r\n+    switch (notification) {\r\n+      case SwitchOverlayNotification(:var mode):\r\n+        await transitionTo(mode);\r\n+\r\n+      case SelectedTagOverlayNotification(:var tag):\r\n+        await animationController.reverse(from: 1.0);\r\n+        tagData.addTag(tag);\r\n+\r\n+        if (context.mounted) {\r\n+          const CloseOverlayNotification().dispatch(context);\r\n+        }\r\n+\r\n+      case CloseOverlayNotification():\r\n+        await animationController.reverse(from: 1.0);\r\n+\r\n+        if (context.mounted) {\r\n+          const CloseOverlayNotification().dispatch(context);\r\n+        }\r\n+\r\n+      case CreateNewTagOverlayNotification(:var name, :var color):\r\n+        var tag = CustomTag(name, color);\r\n+\r\n+        await tagData.addAddableTag(tag);\r\n+        await transitionTo(OverlayMode.select);\r\n+\r\n+      case ModifyWorkingTagNotification(:var name, :var color):\r\n+        var toReplace = workingTag.value!;\r\n+        var tag = CustomTag(name, color);\r\n+\r\n+        await tagData.replaceAddableTag(toReplace, tag);\r\n+        await transitionTo(OverlayMode.select);\r\n+        workingTag.value = null;\r\n+\r\n+      case ChooseWorkingTag(:var tag):\r\n+        workingTag.value = tag;\r\n+\r\n+      case DeleteTag(:var tag):\r\n+        await tagData.removeAddableTag(tag);\r\n+        await transitionTo(OverlayMode.select);\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    animationController.dispose();\r\n+\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+\r\n+    animationController = AnimationController(vsync: this, duration: 250.ms);\r\n+    overlayMode = ValueNotifier(OverlayMode.select);\r\n+    workingTag = ValueNotifier<CustomTag?>(null);\r\n+\r\n+    animationController.forward(from: 0.0);\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    var tagData = context.read<TagData>();\r\n+\r\n+    return NotificationListener<OverlayNotification>(\r\n+      onNotification: (notification) {\r\n+        handleNotification(notification);\r\n+\r\n+        return true;\r\n+      },\r\n+      child: GestureDetector(\r\n+        behavior: HitTestBehavior.translucent,\r\n+        onTap: () async {\r\n+          await animationController.reverse(from: 1.0);\r\n+\r\n+          if (context.mounted) {\r\n+            const CloseOverlayNotification().dispatch(context);\r\n+          }\r\n+        },\r\n+        child: ChangeNotifierProvider.value(\r\n+          value: tagData,\r\n+          child: Scaffold(\r\n+            resizeToAvoidBottomInset: false,\r\n+            backgroundColor: const Color(0x7fCCAEBB),\r\n+            body: BackdropFilter(\r\n+              filter: ImageFilter.blur(sigmaX: 1.5, sigmaY: 1.5),\r\n+              child: ListenableBuilder(\r\n+                listenable: overlayMode,\r\n+                builder: (context, child) => Center(\r\n+                  child: ValueListenableBuilder(\r\n+                    valueListenable: animationController,\r\n+                    builder: (context, animation, child) => Opacity(\r\n+                      opacity: animation,\r\n+                      child: Transform.scale(\r\n+                        scale: (0.8 + 0.4 * animation).clamp(0.0, 1.0),\r\n+                        child: ConstrainedBox(\r\n+                          constraints: BoxConstraints(maxWidth: MediaQuery.sizeOf(context).width * 0.95),\r\n+                          child: child,\r\n+                        ),\r\n+                      ),\r\n+                    ),\r\n+                    child: ValueListenableBuilder(\r\n+                      valueListenable: workingTag,\r\n+                      builder: (context, tag, child) => switch (overlayMode.value) {\r\n+                        OverlayMode.select => const SelectTagOverlay(),\r\n+                        OverlayMode.add => const CreateTagOverlay(),\r\n+\r\n+                        ///\r\n+                        OverlayMode.edit => EditTagOverlay(tag: tag!),\r\n+                        OverlayMode.selectEdit => const SelectEditOverlay(),\r\n+                        OverlayMode.selectDelete => const SelectDeleteOverlay(),\r\n+                      },\r\n+                    ),\r\n+                  ),\r\n+                ),\r\n+              ),\r\n+            ),\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1700406181705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n import \"package:fridgital/widgets/shared/miscellaneous/tags_view/tags_view.dart\";\r\n import \"package:provider/provider.dart\";\r\n \r\n import \"overlays/create_tag_overlay.dart\";\r\n+import \"overlays/edit_tag_overlay.dart\";\r\n import \"overlays/select_tag_overlay.dart\";\r\n \r\n class OverlayHolder extends StatefulWidget {\r\n   const OverlayHolder({super.key});\r\n"
                }
            ],
            "date": 1700406080690,
            "name": "Commit-0",
            "content": "w"
        }
    ]
}