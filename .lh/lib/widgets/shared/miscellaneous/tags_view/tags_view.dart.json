{
    "sourceFile": "lib/widgets/shared/miscellaneous/tags_view/tags_view.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1700133929132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1700138424211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,8 @@\n                   await animationController.reverse(from: 1.0);\r\n                   dispose();\r\n                 case CreateNewTagOverlayNotification(:var name, :var color):\r\n                   var tag = CustomTag(name, color);\r\n-                  tagData.addableTags.add(tag);\r\n \r\n                   continue transition_to_select;\r\n               }\r\n             }());\r\n"
                },
                {
                    "date": 1700138470150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,8 +103,9 @@\n                   await animationController.reverse(from: 1.0);\r\n                   dispose();\r\n                 case CreateNewTagOverlayNotification(:var name, :var color):\r\n                   var tag = CustomTag(name, color);\r\n+                  tagData.addAddableTag(tag);\r\n \r\n                   continue transition_to_select;\r\n               }\r\n             }());\r\n"
                },
                {
                    "date": 1700139196216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,9 @@\n                   await animationController.reverse(from: 1.0);\r\n                   dispose();\r\n                 case CreateNewTagOverlayNotification(:var name, :var color):\r\n                   var tag = CustomTag(name, color);\r\n-                  tagData.addAddableTag(tag);\r\n+                  await tagData.addAddableTag(tag);\r\n \r\n                   continue transition_to_select;\r\n               }\r\n             }());\r\n@@ -281,9 +281,9 @@\n   @override\r\n   void initState() {\r\n     super.initState();\r\n \r\n-    textEditingController = TextEditingController();\r\n+    textEditingController = TextEditingController().;\r\n     selectedColor = ValueNotifier(null);\r\n   }\r\n \r\n   @override\r\n"
                },
                {
                    "date": 1700144881728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -281,9 +281,12 @@\n   @override\r\n   void initState() {\r\n     super.initState();\r\n \r\n-    textEditingController = TextEditingController().;\r\n+    textEditingController = TextEditingController()\r\n+      ..addListener(() {\r\n+        print(\"Typing\");\r\n+      });\r\n     selectedColor = ValueNotifier(null);\r\n   }\r\n \r\n   @override\r\n@@ -341,9 +344,9 @@\n             ConstrainedBox(\r\n               constraints: const BoxConstraints(maxHeight: 312),\r\n               child: MouseScroll<ScrollController>(\r\n                 builder: (context, controller, physics) {\r\n-                  var colors = TagColors.selectable.iterable.toList();\r\n+                  var colors = TagColors.selectable;\r\n \r\n                   return GridView.builder(\r\n                     controller: controller,\r\n                     physics: physics,\r\n"
                },
                {
                    "date": 1700144927829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -414,8 +414,19 @@\n                   }\r\n                 }\r\n               },\r\n             ),\r\n+            _TagWidget(\r\n+              tag: const CustomTag(\"Add new tag\", TagColors.addButton),\r\n+              icon: Icons.add,\r\n+              onTap: () {\r\n+                if (selectedColor.value case UserSelectableColor color) {\r\n+                  if (textEditingController case TextEditingController(:var text) when text.isNotEmpty) {\r\n+                    CreateNewTagOverlayNotification(color: color, name: text).dispatch(context);\r\n+                  }\r\n+                }\r\n+              },\r\n+            ),\r\n           ],\r\n         ),\r\n       ),\r\n     );\r\n"
                },
                {
                    "date": 1700144962618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,486 @@\n+import \"dart:async\";\r\n+import \"dart:ui\";\r\n+\r\n+import \"package:flutter/material.dart\";\r\n+import \"package:fridgital/back_end/tag_data.dart\";\r\n+import \"package:fridgital/shared/classes/selected_color.dart\";\r\n+import \"package:fridgital/shared/constants.dart\";\r\n+import \"package:fridgital/widgets/shared/miscellaneous/clickable_widget.dart\";\r\n+import \"package:fridgital/widgets/shared/miscellaneous/tags_view/notifications.dart\";\r\n+import \"package:mouse_scroll/mouse_scroll.dart\";\r\n+import \"package:provider/provider.dart\";\r\n+\r\n+const _tagIconSize = 14.0;\r\n+const _tagHeight = 32.0;\r\n+const _tagGapToIcon = 16.0;\r\n+\r\n+class TagsView extends StatelessWidget {\r\n+  const TagsView({super.key});\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    var tagData = context.watch<TagData>();\r\n+\r\n+    return Wrap(\r\n+      runSpacing: 8.0,\r\n+      children: [\r\n+        for (var tag in tagData.activeTags)\r\n+          Padding(\r\n+            padding: const EdgeInsets.only(right: 4.0),\r\n+            child: _TagWidget(\r\n+              tag: tag,\r\n+              onTap: () {\r\n+                tagData.removeTag(tag);\r\n+              },\r\n+            ),\r\n+          ),\r\n+        const Padding(\r\n+          padding: EdgeInsets.only(right: 4.0),\r\n+          child: TagSelector(),\r\n+        ),\r\n+      ],\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+enum OverlayMode {\r\n+  select,\r\n+  add,\r\n+}\r\n+\r\n+class TagSelector extends StatefulWidget {\r\n+  const TagSelector({super.key});\r\n+\r\n+  @override\r\n+  State<TagSelector> createState() => _TagSelectorState();\r\n+}\r\n+\r\n+class _TagSelectorState extends State<TagSelector> with TickerProviderStateMixin {\r\n+  void Function() tapHandler(BuildContext context, BoxConstraints constraints) {\r\n+    return () {\r\n+      if (!context.mounted) {\r\n+        return;\r\n+      }\r\n+\r\n+      var tagData = context.read<TagData>();\r\n+      var animationController = AnimationController(vsync: this, duration: const Duration(milliseconds: 250));\r\n+      var overlayConstraints = BoxConstraints(maxWidth: constraints.maxWidth * 0.9);\r\n+      var overlayMode = ValueNotifier(OverlayMode.select);\r\n+\r\n+      late OverlayEntry entry;\r\n+\r\n+      void dispose() {\r\n+        animationController.dispose();\r\n+        entry.remove();\r\n+      }\r\n+\r\n+      void init() {\r\n+        Overlay.of(context).insert(entry);\r\n+        animationController.forward();\r\n+      }\r\n+\r\n+      entry = OverlayEntry(\r\n+        maintainState: true,\r\n+        builder: (_) => NotificationListener<OverlayNotification>(\r\n+          onNotification: (notification) {\r\n+            unawaited(() async {\r\n+              switch (notification) {\r\n+                transition_to_select:\r\n+                case SwitchToSelectOverlayNotification():\r\n+                  await animationController.reverse(from: 1.0);\r\n+                  overlayMode.value = OverlayMode.select;\r\n+                  await animationController.forward();\r\n+                case SwitchToAddOverlayNotification():\r\n+                  await animationController.reverse(from: 1.0);\r\n+                  overlayMode.value = OverlayMode.add;\r\n+                  await animationController.forward();\r\n+\r\n+                case SelectedTagOverlayNotification(:Tag tag):\r\n+                  await animationController.reverse();\r\n+                  tagData.addTag(tag);\r\n+                  dispose();\r\n+                case CloseOverlayNotification():\r\n+                  await animationController.reverse(from: 1.0);\r\n+                  dispose();\r\n+                case CreateNewTagOverlayNotification(:var name, :var color):\r\n+                  var tag = CustomTag(name, color);\r\n+                  await tagData.addAddableTag(tag);\r\n+\r\n+                  continue transition_to_select;\r\n+              }\r\n+            }());\r\n+\r\n+            return true;\r\n+          },\r\n+          child: GestureDetector(\r\n+            behavior: HitTestBehavior.translucent,\r\n+            onTap: () async {\r\n+              await animationController.reverse();\r\n+              dispose();\r\n+            },\r\n+            child: Scaffold(\r\n+              backgroundColor: const Color(0x7fCCAEBB),\r\n+              body: BackdropFilter(\r\n+                filter: ImageFilter.blur(sigmaX: 1.5, sigmaY: 1.5),\r\n+                child: ValueListenableBuilder(\r\n+                  valueListenable: overlayMode,\r\n+                  builder: (context, overlayMode, child) => Center(\r\n+                    child: AnimatedBuilder(\r\n+                      animation: animationController,\r\n+                      builder: (context, child) => Opacity(\r\n+                        opacity: animationController.value,\r\n+                        child: Transform.scale(\r\n+                          scale: (0.8 + animationController.value).clamp(0.0, 1.0),\r\n+                          alignment: Alignment.topCenter,\r\n+                          child: ConstrainedBox(\r\n+                            constraints: overlayConstraints,\r\n+                            child: child,\r\n+                          ),\r\n+                        ),\r\n+                      ),\r\n+                      child: switch (overlayMode) {\r\n+                        OverlayMode.select => SelectTagOverlay(tagData: tagData),\r\n+                        OverlayMode.add => CreateTagOverlay(tagData: tagData),\r\n+                      },\r\n+                    ),\r\n+                  ),\r\n+                ),\r\n+              ),\r\n+            ),\r\n+          ),\r\n+        ),\r\n+      );\r\n+\r\n+      init();\r\n+    };\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return LayoutBuilder(\r\n+      builder: (context, constraints) => ClipRRect(\r\n+        borderRadius: BorderRadius.circular(16.0),\r\n+        child: ClickableWidget(\r\n+          onTap: tapHandler(context, constraints),\r\n+          child: Container(\r\n+            height: _tagHeight,\r\n+            color: TagColors.selector,\r\n+            child: const IgnorePointer(\r\n+              child: Padding(\r\n+                padding: EdgeInsets.symmetric(horizontal: 16.0),\r\n+                child: Row(\r\n+                  mainAxisSize: MainAxisSize.min,\r\n+                  children: [\r\n+                    Text(\"filter\", style: TextStyle(color: Colors.white)),\r\n+                    SizedBox(width: _tagGapToIcon),\r\n+                    Icon(Icons.add, size: _tagIconSize, color: Colors.white),\r\n+                  ],\r\n+                ),\r\n+              ),\r\n+            ),\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+class SelectTagOverlay extends StatelessWidget {\r\n+  const SelectTagOverlay({required this.tagData, super.key});\r\n+\r\n+  final TagData tagData;\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    var theme = Theme.of(context);\r\n+    var TagData(:activeTags, :addableTags) = tagData;\r\n+    var availableTags = addableTags.difference(activeTags);\r\n+\r\n+    return GestureDetector(\r\n+      behavior: HitTestBehavior.translucent,\r\n+      onTap: () {},\r\n+      child: Container(\r\n+        padding: const EdgeInsets.all(16.0),\r\n+        decoration: const BoxDecoration(\r\n+          color: FigmaColors.whiteAccent,\r\n+          borderRadius: BorderRadius.all(Radius.circular(5.0)),\r\n+        ),\r\n+        child: Column(\r\n+          mainAxisSize: MainAxisSize.min,\r\n+          children: [\r\n+            Align(\r\n+              alignment: Alignment.centerLeft,\r\n+              child: Row(\r\n+                children: [\r\n+                  Padding(\r\n+                    padding: const EdgeInsets.only(right: 16.0),\r\n+                    child: ClickableWidget(\r\n+                      onTap: () => const CloseOverlayNotification().dispatch(context),\r\n+                      child: const Icon(Icons.close),\r\n+                    ),\r\n+                  ),\r\n+                  Text(\r\n+                    \"SELECT A TAG\",\r\n+                    style: theme.textTheme.titleMedium?.copyWith(fontWeight: FontWeight.w800),\r\n+                  ),\r\n+                ],\r\n+              ),\r\n+            ),\r\n+            const SizedBox(height: 8.0),\r\n+            ConstrainedBox(\r\n+              constraints: const BoxConstraints(maxHeight: 312),\r\n+              child: switch (availableTags.length) {\r\n+                0 => const SizedBox(),\r\n+                _ => MouseSingleChildScrollView(\r\n+                    child: Wrap(\r\n+                      runSpacing: 8.0,\r\n+                      children: [\r\n+                        for (var tag in availableTags)\r\n+                          Padding(\r\n+                            padding: const EdgeInsets.only(right: 4.0),\r\n+                            child: _TagWidget(\r\n+                              tag: tag,\r\n+                              icon: null,\r\n+                              onTap: () => SelectedTagOverlayNotification(tag).dispatch(context),\r\n+                            ),\r\n+                          ),\r\n+                      ],\r\n+                    ),\r\n+                  ),\r\n+              },\r\n+            ),\r\n+            const SizedBox(height: 16.0),\r\n+            _TagWidget(\r\n+              tag: const CustomTag(\"Create a new tag\", TagColors.addButton),\r\n+              icon: Icons.add,\r\n+              onTap: () => const SwitchToAddOverlayNotification().dispatch(context),\r\n+            ),\r\n+          ],\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+class CreateTagOverlay extends StatefulWidget {\r\n+  const CreateTagOverlay({\r\n+    required this.tagData,\r\n+    super.key,\r\n+  });\r\n+\r\n+  final TagData tagData;\r\n+\r\n+  @override\r\n+  State<CreateTagOverlay> createState() => _CreateTagOverlayState();\r\n+}\r\n+\r\n+class _CreateTagOverlayState extends State<CreateTagOverlay> {\r\n+  late final TextEditingController textEditingController;\r\n+  late final ValueNotifier<UserSelectableColor?> selectedColor;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+\r\n+    textEditingController = TextEditingController()\r\n+      ..addListener(() {\r\n+        print(\"Typing\");\r\n+      });\r\n+    selectedColor = ValueNotifier(null);\r\n+  }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    textEditingController.dispose();\r\n+    selectedColor.dispose();\r\n+\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    var theme = Theme.of(context);\r\n+\r\n+    return GestureDetector(\r\n+      behavior: HitTestBehavior.translucent,\r\n+      onTap: () {},\r\n+      child: Container(\r\n+        padding: const EdgeInsets.all(16.0),\r\n+        decoration: const BoxDecoration(\r\n+          color: FigmaColors.whiteAccent,\r\n+          borderRadius: BorderRadius.all(Radius.circular(5.0)),\r\n+        ),\r\n+        child: Column(\r\n+          mainAxisSize: MainAxisSize.min,\r\n+          children: [\r\n+            Align(\r\n+              alignment: Alignment.centerLeft,\r\n+              child: Row(\r\n+                children: [\r\n+                  Padding(\r\n+                    padding: const EdgeInsets.only(right: 16.0),\r\n+                    child: ClickableWidget(\r\n+                      onTap: () {\r\n+                        const CloseOverlayNotification().dispatch(context);\r\n+                      },\r\n+                      child: const Icon(Icons.close),\r\n+                    ),\r\n+                  ),\r\n+                  Expanded(\r\n+                    child: TextField(\r\n+                      controller: textEditingController,\r\n+                      decoration: const InputDecoration(\r\n+                        hintText: \"Tag name\",\r\n+                        border: InputBorder.none,\r\n+                        contentPadding: EdgeInsets.zero,\r\n+                      ),\r\n+                      style: theme.textTheme.titleMedium?.copyWith(fontWeight: FontWeight.w800),\r\n+                    ),\r\n+                  ),\r\n+                ],\r\n+              ),\r\n+            ),\r\n+            const SizedBox(height: 8.0),\r\n+            ConstrainedBox(\r\n+              constraints: const BoxConstraints(maxHeight: 312),\r\n+              child: MouseScroll<ScrollController>(\r\n+                builder: (context, controller, physics) {\r\n+                  var colors = TagColors.selectable;\r\n+\r\n+                  return GridView.builder(\r\n+                    controller: controller,\r\n+                    physics: physics,\r\n+                    gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 5),\r\n+                    itemCount: colors.length,\r\n+                    itemBuilder: (context, index) => ClickableWidget(\r\n+                      onTap: () {\r\n+                        selectedColor.value = colors[index];\r\n+                      },\r\n+                      child: Padding(\r\n+                        padding: const EdgeInsets.all(4.0),\r\n+                        child: LayoutBuilder(\r\n+                          builder: (context, constraints) => Center(\r\n+                            child: Container(\r\n+                              width: constraints.maxWidth,\r\n+                              height: constraints.maxHeight,\r\n+                              decoration: BoxDecoration(\r\n+                                shape: BoxShape.circle,\r\n+                                color: colors[index],\r\n+                              ),\r\n+                              child: ValueListenableBuilder(\r\n+                                valueListenable: selectedColor,\r\n+                                builder: (context, selectedColor, child) => selectedColor != colors[index]\r\n+                                    ? const SizedBox()\r\n+                                    : Center(\r\n+                                        child: Container(\r\n+                                          width: constraints.maxWidth * 0.9,\r\n+                                          height: constraints.maxHeight * 0.9,\r\n+                                          decoration: BoxDecoration(\r\n+                                            shape: BoxShape.circle,\r\n+                                            color: selectedColor == colors[index] //\r\n+                                                ? FigmaColors.whiteAccent\r\n+                                                : colors[index],\r\n+                                          ),\r\n+                                          child: Center(\r\n+                                            child: Container(\r\n+                                              width: constraints.maxWidth * 0.75,\r\n+                                              height: constraints.maxHeight * 0.75,\r\n+                                              decoration: BoxDecoration(\r\n+                                                shape: BoxShape.circle,\r\n+                                                color: colors[index],\r\n+                                              ),\r\n+                                            ),\r\n+                                          ),\r\n+                                        ),\r\n+                                      ),\r\n+                              ),\r\n+                            ),\r\n+                          ),\r\n+                        ),\r\n+                      ),\r\n+                    ),\r\n+                  );\r\n+                },\r\n+              ),\r\n+            ),\r\n+            const SizedBox(height: 16.0),\r\n+            _TagWidget(\r\n+              tag: const CustomTag(\"Add new tag\", TagColors.addButton),\r\n+              icon: Icons.add,\r\n+              onTap: () {\r\n+                if (selectedColor.value case UserSelectableColor color) {\r\n+                  if (textEditingController case TextEditingController(:var text) when text.isNotEmpty) {\r\n+                    CreateNewTagOverlayNotification(color: color, name: text).dispatch(context);\r\n+                  }\r\n+                }\r\n+              },\r\n+            ),\r\n+            _TagWidget(\r\n+              tag: const CustomTag(\"Modify existing tag\", TagColors.addButton),\r\n+              icon: Icons.add,\r\n+              onTap: () {\r\n+                if (selectedColor.value case UserSelectableColor color) {\r\n+                  if (textEditingController case TextEditingController(:var text) when text.isNotEmpty) {\r\n+                    CreateNewTagOverlayNotification(color: color, name: text).dispatch(context);\r\n+                  }\r\n+                }\r\n+              },\r\n+            ),\r\n+            _TagWidget(\r\n+              tag: const CustomTag(\"Remove existing tag\", TagColors.addButton),\r\n+              icon: Icons.add,\r\n+              onTap: () {\r\n+                if (selectedColor.value case UserSelectableColor color) {\r\n+                  if (textEditingController case TextEditingController(:var text) when text.isNotEmpty) {\r\n+                    CreateNewTagOverlayNotification(color: color, name: text).dispatch(context);\r\n+                  }\r\n+                }\r\n+              },\r\n+            ),\r\n+          ],\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+/// Represents a simple removable tag.\r\n+class _TagWidget extends StatelessWidget {\r\n+  const _TagWidget({required this.tag, this.icon = Icons.close, this.onTap});\r\n+\r\n+  final Tag tag;\r\n+  final IconData? icon;\r\n+  final void Function()? onTap;\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return ClipRRect(\r\n+      borderRadius: BorderRadius.circular(16.0),\r\n+      child: ClickableWidget(\r\n+        onTap: onTap,\r\n+        child: SizedBox(\r\n+          height: _tagHeight,\r\n+          child: Material(\r\n+            color: tag.color,\r\n+            child: Padding(\r\n+              padding: const EdgeInsets.symmetric(horizontal: 16.0),\r\n+              child: icon == null\r\n+                  ? Row(\r\n+                      mainAxisSize: MainAxisSize.min,\r\n+                      children: [Text(tag.name, style: const TextStyle(color: Colors.white))],\r\n+                    )\r\n+                  : Row(\r\n+                      mainAxisSize: MainAxisSize.min,\r\n+                      children: [\r\n+                        Text(tag.name, style: const TextStyle(color: Colors.white)),\r\n+                        const SizedBox(width: _tagGapToIcon),\r\n+                        Icon(icon, size: _tagIconSize, color: Colors.white),\r\n+                      ],\r\n+                    ),\r\n+            ),\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1700145014360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -414,10 +414,11 @@\n                   }\r\n                 }\r\n               },\r\n             ),\r\n+            const SizedBox(height: 8.0),\r\n             _TagWidget(\r\n-              tag: const CustomTag(\"Modify existing tag\", TagColors.addButton),\r\n+              tag: const CustomTag(\"Modify existing tag\", TagColors.e),\r\n               icon: Icons.add,\r\n               onTap: () {\r\n                 if (selectedColor.value case UserSelectableColor color) {\r\n                   if (textEditingController case TextEditingController(:var text) when text.isNotEmpty) {\r\n@@ -425,8 +426,9 @@\n                   }\r\n                 }\r\n               },\r\n             ),\r\n+            const SizedBox(height: 8.0),\r\n             _TagWidget(\r\n               tag: const CustomTag(\"Remove existing tag\", TagColors.addButton),\r\n               icon: Icons.add,\r\n               onTap: () {\r\n@@ -483,479 +485,4 @@\n       ),\r\n     );\r\n   }\r\n }\r\n-import \"dart:async\";\r\n-import \"dart:ui\";\r\n-\r\n-import \"package:flutter/material.dart\";\r\n-import \"package:fridgital/back_end/tag_data.dart\";\r\n-import \"package:fridgital/shared/classes/selected_color.dart\";\r\n-import \"package:fridgital/shared/constants.dart\";\r\n-import \"package:fridgital/widgets/shared/miscellaneous/clickable_widget.dart\";\r\n-import \"package:fridgital/widgets/shared/miscellaneous/tags_view/notifications.dart\";\r\n-import \"package:mouse_scroll/mouse_scroll.dart\";\r\n-import \"package:provider/provider.dart\";\r\n-\r\n-const _tagIconSize = 14.0;\r\n-const _tagHeight = 32.0;\r\n-const _tagGapToIcon = 16.0;\r\n-\r\n-class TagsView extends StatelessWidget {\r\n-  const TagsView({super.key});\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    var tagData = context.watch<TagData>();\r\n-\r\n-    return Wrap(\r\n-      runSpacing: 8.0,\r\n-      children: [\r\n-        for (var tag in tagData.activeTags)\r\n-          Padding(\r\n-            padding: const EdgeInsets.only(right: 4.0),\r\n-            child: _TagWidget(\r\n-              tag: tag,\r\n-              onTap: () {\r\n-                tagData.removeTag(tag);\r\n-              },\r\n-            ),\r\n-          ),\r\n-        const Padding(\r\n-          padding: EdgeInsets.only(right: 4.0),\r\n-          child: TagSelector(),\r\n-        ),\r\n-      ],\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-enum OverlayMode {\r\n-  select,\r\n-  add,\r\n-}\r\n-\r\n-class TagSelector extends StatefulWidget {\r\n-  const TagSelector({super.key});\r\n-\r\n-  @override\r\n-  State<TagSelector> createState() => _TagSelectorState();\r\n-}\r\n-\r\n-class _TagSelectorState extends State<TagSelector> with TickerProviderStateMixin {\r\n-  void Function() tapHandler(BuildContext context, BoxConstraints constraints) {\r\n-    return () {\r\n-      if (!context.mounted) {\r\n-        return;\r\n-      }\r\n-\r\n-      var tagData = context.read<TagData>();\r\n-      var animationController = AnimationController(vsync: this, duration: const Duration(milliseconds: 250));\r\n-      var overlayConstraints = BoxConstraints(maxWidth: constraints.maxWidth * 0.9);\r\n-      var overlayMode = ValueNotifier(OverlayMode.select);\r\n-\r\n-      late OverlayEntry entry;\r\n-\r\n-      void dispose() {\r\n-        animationController.dispose();\r\n-        entry.remove();\r\n-      }\r\n-\r\n-      void init() {\r\n-        Overlay.of(context).insert(entry);\r\n-        animationController.forward();\r\n-      }\r\n-\r\n-      entry = OverlayEntry(\r\n-        maintainState: true,\r\n-        builder: (_) => NotificationListener<OverlayNotification>(\r\n-          onNotification: (notification) {\r\n-            unawaited(() async {\r\n-              switch (notification) {\r\n-                transition_to_select:\r\n-                case SwitchToSelectOverlayNotification():\r\n-                  await animationController.reverse(from: 1.0);\r\n-                  overlayMode.value = OverlayMode.select;\r\n-                  await animationController.forward();\r\n-                case SwitchToAddOverlayNotification():\r\n-                  await animationController.reverse(from: 1.0);\r\n-                  overlayMode.value = OverlayMode.add;\r\n-                  await animationController.forward();\r\n-\r\n-                case SelectedTagOverlayNotification(:Tag tag):\r\n-                  await animationController.reverse();\r\n-                  tagData.addTag(tag);\r\n-                  dispose();\r\n-                case CloseOverlayNotification():\r\n-                  await animationController.reverse(from: 1.0);\r\n-                  dispose();\r\n-                case CreateNewTagOverlayNotification(:var name, :var color):\r\n-                  var tag = CustomTag(name, color);\r\n-                  await tagData.addAddableTag(tag);\r\n-\r\n-                  continue transition_to_select;\r\n-              }\r\n-            }());\r\n-\r\n-            return true;\r\n-          },\r\n-          child: GestureDetector(\r\n-            behavior: HitTestBehavior.translucent,\r\n-            onTap: () async {\r\n-              await animationController.reverse();\r\n-              dispose();\r\n-            },\r\n-            child: Scaffold(\r\n-              backgroundColor: const Color(0x7fCCAEBB),\r\n-              body: BackdropFilter(\r\n-                filter: ImageFilter.blur(sigmaX: 1.5, sigmaY: 1.5),\r\n-                child: ValueListenableBuilder(\r\n-                  valueListenable: overlayMode,\r\n-                  builder: (context, overlayMode, child) => Center(\r\n-                    child: AnimatedBuilder(\r\n-                      animation: animationController,\r\n-                      builder: (context, child) => Opacity(\r\n-                        opacity: animationController.value,\r\n-                        child: Transform.scale(\r\n-                          scale: (0.8 + animationController.value).clamp(0.0, 1.0),\r\n-                          alignment: Alignment.topCenter,\r\n-                          child: ConstrainedBox(\r\n-                            constraints: overlayConstraints,\r\n-                            child: child,\r\n-                          ),\r\n-                        ),\r\n-                      ),\r\n-                      child: switch (overlayMode) {\r\n-                        OverlayMode.select => SelectTagOverlay(tagData: tagData),\r\n-                        OverlayMode.add => CreateTagOverlay(tagData: tagData),\r\n-                      },\r\n-                    ),\r\n-                  ),\r\n-                ),\r\n-              ),\r\n-            ),\r\n-          ),\r\n-        ),\r\n-      );\r\n-\r\n-      init();\r\n-    };\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return LayoutBuilder(\r\n-      builder: (context, constraints) => ClipRRect(\r\n-        borderRadius: BorderRadius.circular(16.0),\r\n-        child: ClickableWidget(\r\n-          onTap: tapHandler(context, constraints),\r\n-          child: Container(\r\n-            height: _tagHeight,\r\n-            color: TagColors.selector,\r\n-            child: const IgnorePointer(\r\n-              child: Padding(\r\n-                padding: EdgeInsets.symmetric(horizontal: 16.0),\r\n-                child: Row(\r\n-                  mainAxisSize: MainAxisSize.min,\r\n-                  children: [\r\n-                    Text(\"filter\", style: TextStyle(color: Colors.white)),\r\n-                    SizedBox(width: _tagGapToIcon),\r\n-                    Icon(Icons.add, size: _tagIconSize, color: Colors.white),\r\n-                  ],\r\n-                ),\r\n-              ),\r\n-            ),\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-class SelectTagOverlay extends StatelessWidget {\r\n-  const SelectTagOverlay({required this.tagData, super.key});\r\n-\r\n-  final TagData tagData;\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    var theme = Theme.of(context);\r\n-    var TagData(:activeTags, :addableTags) = tagData;\r\n-    var availableTags = addableTags.difference(activeTags);\r\n-\r\n-    return GestureDetector(\r\n-      behavior: HitTestBehavior.translucent,\r\n-      onTap: () {},\r\n-      child: Container(\r\n-        padding: const EdgeInsets.all(16.0),\r\n-        decoration: const BoxDecoration(\r\n-          color: FigmaColors.whiteAccent,\r\n-          borderRadius: BorderRadius.all(Radius.circular(5.0)),\r\n-        ),\r\n-        child: Column(\r\n-          mainAxisSize: MainAxisSize.min,\r\n-          children: [\r\n-            Align(\r\n-              alignment: Alignment.centerLeft,\r\n-              child: Row(\r\n-                children: [\r\n-                  Padding(\r\n-                    padding: const EdgeInsets.only(right: 16.0),\r\n-                    child: ClickableWidget(\r\n-                      onTap: () => const CloseOverlayNotification().dispatch(context),\r\n-                      child: const Icon(Icons.close),\r\n-                    ),\r\n-                  ),\r\n-                  Text(\r\n-                    \"SELECT A TAG\",\r\n-                    style: theme.textTheme.titleMedium?.copyWith(fontWeight: FontWeight.w800),\r\n-                  ),\r\n-                ],\r\n-              ),\r\n-            ),\r\n-            const SizedBox(height: 8.0),\r\n-            ConstrainedBox(\r\n-              constraints: const BoxConstraints(maxHeight: 312),\r\n-              child: switch (availableTags.length) {\r\n-                0 => const SizedBox(),\r\n-                _ => MouseSingleChildScrollView(\r\n-                    child: Wrap(\r\n-                      runSpacing: 8.0,\r\n-                      children: [\r\n-                        for (var tag in availableTags)\r\n-                          Padding(\r\n-                            padding: const EdgeInsets.only(right: 4.0),\r\n-                            child: _TagWidget(\r\n-                              tag: tag,\r\n-                              icon: null,\r\n-                              onTap: () => SelectedTagOverlayNotification(tag).dispatch(context),\r\n-                            ),\r\n-                          ),\r\n-                      ],\r\n-                    ),\r\n-                  ),\r\n-              },\r\n-            ),\r\n-            const SizedBox(height: 16.0),\r\n-            _TagWidget(\r\n-              tag: const CustomTag(\"Create a new tag\", TagColors.addButton),\r\n-              icon: Icons.add,\r\n-              onTap: () => const SwitchToAddOverlayNotification().dispatch(context),\r\n-            ),\r\n-          ],\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-class CreateTagOverlay extends StatefulWidget {\r\n-  const CreateTagOverlay({\r\n-    required this.tagData,\r\n-    super.key,\r\n-  });\r\n-\r\n-  final TagData tagData;\r\n-\r\n-  @override\r\n-  State<CreateTagOverlay> createState() => _CreateTagOverlayState();\r\n-}\r\n-\r\n-class _CreateTagOverlayState extends State<CreateTagOverlay> {\r\n-  late final TextEditingController textEditingController;\r\n-  late final ValueNotifier<UserSelectableColor?> selectedColor;\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-\r\n-    textEditingController = TextEditingController()\r\n-      ..addListener(() {\r\n-        print(\"Typing\");\r\n-      });\r\n-    selectedColor = ValueNotifier(null);\r\n-  }\r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    textEditingController.dispose();\r\n-    selectedColor.dispose();\r\n-\r\n-    super.dispose();\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    var theme = Theme.of(context);\r\n-\r\n-    return GestureDetector(\r\n-      behavior: HitTestBehavior.translucent,\r\n-      onTap: () {},\r\n-      child: Container(\r\n-        padding: const EdgeInsets.all(16.0),\r\n-        decoration: const BoxDecoration(\r\n-          color: FigmaColors.whiteAccent,\r\n-          borderRadius: BorderRadius.all(Radius.circular(5.0)),\r\n-        ),\r\n-        child: Column(\r\n-          mainAxisSize: MainAxisSize.min,\r\n-          children: [\r\n-            Align(\r\n-              alignment: Alignment.centerLeft,\r\n-              child: Row(\r\n-                children: [\r\n-                  Padding(\r\n-                    padding: const EdgeInsets.only(right: 16.0),\r\n-                    child: ClickableWidget(\r\n-                      onTap: () {\r\n-                        const CloseOverlayNotification().dispatch(context);\r\n-                      },\r\n-                      child: const Icon(Icons.close),\r\n-                    ),\r\n-                  ),\r\n-                  Expanded(\r\n-                    child: TextField(\r\n-                      controller: textEditingController,\r\n-                      decoration: const InputDecoration(\r\n-                        hintText: \"Tag name\",\r\n-                        border: InputBorder.none,\r\n-                        contentPadding: EdgeInsets.zero,\r\n-                      ),\r\n-                      style: theme.textTheme.titleMedium?.copyWith(fontWeight: FontWeight.w800),\r\n-                    ),\r\n-                  ),\r\n-                ],\r\n-              ),\r\n-            ),\r\n-            const SizedBox(height: 8.0),\r\n-            ConstrainedBox(\r\n-              constraints: const BoxConstraints(maxHeight: 312),\r\n-              child: MouseScroll<ScrollController>(\r\n-                builder: (context, controller, physics) {\r\n-                  var colors = TagColors.selectable;\r\n-\r\n-                  return GridView.builder(\r\n-                    controller: controller,\r\n-                    physics: physics,\r\n-                    gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 5),\r\n-                    itemCount: colors.length,\r\n-                    itemBuilder: (context, index) => ClickableWidget(\r\n-                      onTap: () {\r\n-                        selectedColor.value = colors[index];\r\n-                      },\r\n-                      child: Padding(\r\n-                        padding: const EdgeInsets.all(4.0),\r\n-                        child: LayoutBuilder(\r\n-                          builder: (context, constraints) => Center(\r\n-                            child: Container(\r\n-                              width: constraints.maxWidth,\r\n-                              height: constraints.maxHeight,\r\n-                              decoration: BoxDecoration(\r\n-                                shape: BoxShape.circle,\r\n-                                color: colors[index],\r\n-                              ),\r\n-                              child: ValueListenableBuilder(\r\n-                                valueListenable: selectedColor,\r\n-                                builder: (context, selectedColor, child) => selectedColor != colors[index]\r\n-                                    ? const SizedBox()\r\n-                                    : Center(\r\n-                                        child: Container(\r\n-                                          width: constraints.maxWidth * 0.9,\r\n-                                          height: constraints.maxHeight * 0.9,\r\n-                                          decoration: BoxDecoration(\r\n-                                            shape: BoxShape.circle,\r\n-                                            color: selectedColor == colors[index] //\r\n-                                                ? FigmaColors.whiteAccent\r\n-                                                : colors[index],\r\n-                                          ),\r\n-                                          child: Center(\r\n-                                            child: Container(\r\n-                                              width: constraints.maxWidth * 0.75,\r\n-                                              height: constraints.maxHeight * 0.75,\r\n-                                              decoration: BoxDecoration(\r\n-                                                shape: BoxShape.circle,\r\n-                                                color: colors[index],\r\n-                                              ),\r\n-                                            ),\r\n-                                          ),\r\n-                                        ),\r\n-                                      ),\r\n-                              ),\r\n-                            ),\r\n-                          ),\r\n-                        ),\r\n-                      ),\r\n-                    ),\r\n-                  );\r\n-                },\r\n-              ),\r\n-            ),\r\n-            const SizedBox(height: 16.0),\r\n-            _TagWidget(\r\n-              tag: const CustomTag(\"Add new tag\", TagColors.addButton),\r\n-              icon: Icons.add,\r\n-              onTap: () {\r\n-                if (selectedColor.value case UserSelectableColor color) {\r\n-                  if (textEditingController case TextEditingController(:var text) when text.isNotEmpty) {\r\n-                    CreateNewTagOverlayNotification(color: color, name: text).dispatch(context);\r\n-                  }\r\n-                }\r\n-              },\r\n-            ),\r\n-            _TagWidget(\r\n-              tag: const CustomTag(\"Add new tag\", TagColors.addButton),\r\n-              icon: Icons.add,\r\n-              onTap: () {\r\n-                if (selectedColor.value case UserSelectableColor color) {\r\n-                  if (textEditingController case TextEditingController(:var text) when text.isNotEmpty) {\r\n-                    CreateNewTagOverlayNotification(color: color, name: text).dispatch(context);\r\n-                  }\r\n-                }\r\n-              },\r\n-            ),\r\n-          ],\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-/// Represents a simple removable tag.\r\n-class _TagWidget extends StatelessWidget {\r\n-  const _TagWidget({required this.tag, this.icon = Icons.close, this.onTap});\r\n-\r\n-  final Tag tag;\r\n-  final IconData? icon;\r\n-  final void Function()? onTap;\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return ClipRRect(\r\n-      borderRadius: BorderRadius.circular(16.0),\r\n-      child: ClickableWidget(\r\n-        onTap: onTap,\r\n-        child: SizedBox(\r\n-          height: _tagHeight,\r\n-          child: Material(\r\n-            color: tag.color,\r\n-            child: Padding(\r\n-              padding: const EdgeInsets.symmetric(horizontal: 16.0),\r\n-              child: icon == null\r\n-                  ? Row(\r\n-                      mainAxisSize: MainAxisSize.min,\r\n-                      children: [Text(tag.name, style: const TextStyle(color: Colors.white))],\r\n-                    )\r\n-                  : Row(\r\n-                      mainAxisSize: MainAxisSize.min,\r\n-                      children: [\r\n-                        Text(tag.name, style: const TextStyle(color: Colors.white)),\r\n-                        const SizedBox(width: _tagGapToIcon),\r\n-                        Icon(icon, size: _tagIconSize, color: Colors.white),\r\n-                      ],\r\n-                    ),\r\n-            ),\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1700145047626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -254,8 +254,32 @@\n               tag: const CustomTag(\"Create a new tag\", TagColors.addButton),\r\n               icon: Icons.add,\r\n               onTap: () => const SwitchToAddOverlayNotification().dispatch(context),\r\n             ),\r\n+            const SizedBox(height: 8.0),\r\n+            _TagWidget(\r\n+              tag: const CustomTag(\"Modify existing tag\", TagColors.addButton),\r\n+              icon: Icons.edit,\r\n+              onTap: () {\r\n+                if (selectedColor.value case UserSelectableColor color) {\r\n+                  if (textEditingController case TextEditingController(:var text) when text.isNotEmpty) {\r\n+                    CreateNewTagOverlayNotification(color: color, name: text).dispatch(context);\r\n+                  }\r\n+                }\r\n+              },\r\n+            ),\r\n+            const SizedBox(height: 8.0),\r\n+            _TagWidget(\r\n+              tag: const CustomTag(\"Remove existing tag\", TagColors.addButton),\r\n+              icon: Icons.remove,\r\n+              onTap: () {\r\n+                if (selectedColor.value case UserSelectableColor color) {\r\n+                  if (textEditingController case TextEditingController(:var text) when text.isNotEmpty) {\r\n+                    CreateNewTagOverlayNotification(color: color, name: text).dispatch(context);\r\n+                  }\r\n+                }\r\n+              },\r\n+            ),\r\n           ],\r\n         ),\r\n       ),\r\n     );\r\n"
                },
                {
                    "date": 1700145318098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,476 @@\n+import \"dart:async\";\r\n+import \"dart:ui\";\r\n+\r\n+import \"package:flutter/material.dart\";\r\n+import \"package:fridgital/back_end/tag_data.dart\";\r\n+import \"package:fridgital/shared/classes/selected_color.dart\";\r\n+import \"package:fridgital/shared/constants.dart\";\r\n+import \"package:fridgital/widgets/shared/miscellaneous/clickable_widget.dart\";\r\n+import \"package:fridgital/widgets/shared/miscellaneous/tags_view/notifications.dart\";\r\n+import \"package:mouse_scroll/mouse_scroll.dart\";\r\n+import \"package:provider/provider.dart\";\r\n+\r\n+const _tagIconSize = 14.0;\r\n+const _tagHeight = 32.0;\r\n+const _tagGapToIcon = 16.0;\r\n+\r\n+class TagsView extends StatelessWidget {\r\n+  const TagsView({super.key});\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    var tagData = context.watch<TagData>();\r\n+\r\n+    return Wrap(\r\n+      runSpacing: 8.0,\r\n+      children: [\r\n+        for (var tag in tagData.activeTags)\r\n+          Padding(\r\n+            padding: const EdgeInsets.only(right: 4.0),\r\n+            child: _TagWidget(\r\n+              tag: tag,\r\n+              onTap: () {\r\n+                tagData.removeTag(tag);\r\n+              },\r\n+            ),\r\n+          ),\r\n+        const Padding(\r\n+          padding: EdgeInsets.only(right: 4.0),\r\n+          child: TagSelector(),\r\n+        ),\r\n+      ],\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+enum OverlayMode {\r\n+  select,\r\n+  add,\r\n+}\r\n+\r\n+class TagSelector extends StatefulWidget {\r\n+  const TagSelector({super.key});\r\n+\r\n+  @override\r\n+  State<TagSelector> createState() => _TagSelectorState();\r\n+}\r\n+\r\n+class _TagSelectorState extends State<TagSelector> with TickerProviderStateMixin {\r\n+  void Function() tapHandler(BuildContext context, BoxConstraints constraints) {\r\n+    return () {\r\n+      if (!context.mounted) {\r\n+        return;\r\n+      }\r\n+\r\n+      var tagData = context.read<TagData>();\r\n+      var animationController = AnimationController(vsync: this, duration: const Duration(milliseconds: 250));\r\n+      var overlayConstraints = BoxConstraints(maxWidth: constraints.maxWidth * 0.9);\r\n+      var overlayMode = ValueNotifier(OverlayMode.select);\r\n+\r\n+      late OverlayEntry entry;\r\n+\r\n+      void dispose() {\r\n+        animationController.dispose();\r\n+        entry.remove();\r\n+      }\r\n+\r\n+      void init() {\r\n+        Overlay.of(context).insert(entry);\r\n+        animationController.forward();\r\n+      }\r\n+\r\n+      entry = OverlayEntry(\r\n+        maintainState: true,\r\n+        builder: (_) => NotificationListener<OverlayNotification>(\r\n+          onNotification: (notification) {\r\n+            unawaited(() async {\r\n+              switch (notification) {\r\n+                transition_to_select:\r\n+                case SwitchToSelectOverlayNotification():\r\n+                  await animationController.reverse(from: 1.0);\r\n+                  overlayMode.value = OverlayMode.select;\r\n+                  await animationController.forward();\r\n+                case SwitchToAddOverlayNotification():\r\n+                  await animationController.reverse(from: 1.0);\r\n+                  overlayMode.value = OverlayMode.add;\r\n+                  await animationController.forward();\r\n+\r\n+                case SelectedTagOverlayNotification(:Tag tag):\r\n+                  await animationController.reverse();\r\n+                  tagData.addTag(tag);\r\n+                  dispose();\r\n+                case CloseOverlayNotification():\r\n+                  await animationController.reverse(from: 1.0);\r\n+                  dispose();\r\n+                case CreateNewTagOverlayNotification(:var name, :var color):\r\n+                  var tag = CustomTag(name, color);\r\n+                  await tagData.addAddableTag(tag);\r\n+\r\n+                  continue transition_to_select;\r\n+              }\r\n+            }());\r\n+\r\n+            return true;\r\n+          },\r\n+          child: GestureDetector(\r\n+            behavior: HitTestBehavior.translucent,\r\n+            onTap: () async {\r\n+              await animationController.reverse();\r\n+              dispose();\r\n+            },\r\n+            child: Scaffold(\r\n+              backgroundColor: const Color(0x7fCCAEBB),\r\n+              body: BackdropFilter(\r\n+                filter: ImageFilter.blur(sigmaX: 1.5, sigmaY: 1.5),\r\n+                child: ValueListenableBuilder(\r\n+                  valueListenable: overlayMode,\r\n+                  builder: (context, overlayMode, child) => Center(\r\n+                    child: AnimatedBuilder(\r\n+                      animation: animationController,\r\n+                      builder: (context, child) => Opacity(\r\n+                        opacity: animationController.value,\r\n+                        child: Transform.scale(\r\n+                          scale: (0.8 + animationController.value).clamp(0.0, 1.0),\r\n+                          alignment: Alignment.topCenter,\r\n+                          child: ConstrainedBox(\r\n+                            constraints: overlayConstraints,\r\n+                            child: child,\r\n+                          ),\r\n+                        ),\r\n+                      ),\r\n+                      child: switch (overlayMode) {\r\n+                        OverlayMode.select => SelectTagOverlay(tagData: tagData),\r\n+                        OverlayMode.add => CreateTagOverlay(tagData: tagData),\r\n+                      },\r\n+                    ),\r\n+                  ),\r\n+                ),\r\n+              ),\r\n+            ),\r\n+          ),\r\n+        ),\r\n+      );\r\n+\r\n+      init();\r\n+    };\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return LayoutBuilder(\r\n+      builder: (context, constraints) => ClipRRect(\r\n+        borderRadius: BorderRadius.circular(16.0),\r\n+        child: ClickableWidget(\r\n+          onTap: tapHandler(context, constraints),\r\n+          child: Container(\r\n+            height: _tagHeight,\r\n+            color: TagColors.selector,\r\n+            child: const IgnorePointer(\r\n+              child: Padding(\r\n+                padding: EdgeInsets.symmetric(horizontal: 16.0),\r\n+                child: Row(\r\n+                  mainAxisSize: MainAxisSize.min,\r\n+                  children: [\r\n+                    Text(\"filter\", style: TextStyle(color: Colors.white)),\r\n+                    SizedBox(width: _tagGapToIcon),\r\n+                    Icon(Icons.add, size: _tagIconSize, color: Colors.white),\r\n+                  ],\r\n+                ),\r\n+              ),\r\n+            ),\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+class SelectTagOverlay extends StatelessWidget {\r\n+  const SelectTagOverlay({required this.tagData, super.key});\r\n+\r\n+  final TagData tagData;\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    var theme = Theme.of(context);\r\n+    var TagData(:activeTags, :addableTags) = tagData;\r\n+    var availableTags = addableTags.difference(activeTags);\r\n+\r\n+    return GestureDetector(\r\n+      behavior: HitTestBehavior.translucent,\r\n+      onTap: () {},\r\n+      child: Container(\r\n+        padding: const EdgeInsets.all(16.0),\r\n+        decoration: const BoxDecoration(\r\n+          color: FigmaColors.whiteAccent,\r\n+          borderRadius: BorderRadius.all(Radius.circular(5.0)),\r\n+        ),\r\n+        child: Column(\r\n+          mainAxisSize: MainAxisSize.min,\r\n+          children: [\r\n+            Align(\r\n+              alignment: Alignment.centerLeft,\r\n+              child: Row(\r\n+                children: [\r\n+                  Padding(\r\n+                    padding: const EdgeInsets.only(right: 16.0),\r\n+                    child: ClickableWidget(\r\n+                      onTap: () => const CloseOverlayNotification().dispatch(context),\r\n+                      child: const Icon(Icons.close),\r\n+                    ),\r\n+                  ),\r\n+                  Text(\r\n+                    \"SELECT A TAG\",\r\n+                    style: theme.textTheme.titleMedium?.copyWith(fontWeight: FontWeight.w800),\r\n+                  ),\r\n+                ],\r\n+              ),\r\n+            ),\r\n+            const SizedBox(height: 8.0),\r\n+            ConstrainedBox(\r\n+              constraints: const BoxConstraints(maxHeight: 312),\r\n+              child: switch (availableTags.length) {\r\n+                0 => const SizedBox(),\r\n+                _ => MouseSingleChildScrollView(\r\n+                    child: Wrap(\r\n+                      runSpacing: 8.0,\r\n+                      children: [\r\n+                        for (var tag in availableTags)\r\n+                          Padding(\r\n+                            padding: const EdgeInsets.only(right: 4.0),\r\n+                            child: _TagWidget(\r\n+                              tag: tag,\r\n+                              icon: null,\r\n+                              onTap: () => SelectedTagOverlayNotification(tag).dispatch(context),\r\n+                            ),\r\n+                          ),\r\n+                      ],\r\n+                    ),\r\n+                  ),\r\n+              },\r\n+            ),\r\n+            const SizedBox(height: 16.0),\r\n+            _TagWidget(\r\n+              tag: const CustomTag(\"Create a new tag\", TagColors.addButton),\r\n+              icon: Icons.add,\r\n+              onTap: () => const SwitchToAddOverlayNotification().dispatch(context),\r\n+            ),\r\n+            const SizedBox(height: 8.0),\r\n+            _TagWidget(\r\n+              tag: const CustomTag(\"Modify existing tag\", TagColors.addButton),\r\n+              icon: Icons.edit,\r\n+              onTap: () {},\r\n+            ),\r\n+            const SizedBox(height: 8.0),\r\n+            _TagWidget(\r\n+              tag: const CustomTag(\"Remove  tag\", TagColors.addButton),\r\n+              icon: Icons.remove,\r\n+              onTap: () {},\r\n+            ),\r\n+          ],\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+class CreateTagOverlay extends StatefulWidget {\r\n+  const CreateTagOverlay({\r\n+    required this.tagData,\r\n+    super.key,\r\n+  });\r\n+\r\n+  final TagData tagData;\r\n+\r\n+  @override\r\n+  State<CreateTagOverlay> createState() => _CreateTagOverlayState();\r\n+}\r\n+\r\n+class _CreateTagOverlayState extends State<CreateTagOverlay> {\r\n+  late final TextEditingController textEditingController;\r\n+  late final ValueNotifier<UserSelectableColor?> selectedColor;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+\r\n+    textEditingController = TextEditingController()\r\n+      ..addListener(() {\r\n+        print(\"Typing\");\r\n+      });\r\n+    selectedColor = ValueNotifier(null);\r\n+  }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    textEditingController.dispose();\r\n+    selectedColor.dispose();\r\n+\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    var theme = Theme.of(context);\r\n+\r\n+    return GestureDetector(\r\n+      behavior: HitTestBehavior.translucent,\r\n+      onTap: () {},\r\n+      child: Container(\r\n+        padding: const EdgeInsets.all(16.0),\r\n+        decoration: const BoxDecoration(\r\n+          color: FigmaColors.whiteAccent,\r\n+          borderRadius: BorderRadius.all(Radius.circular(5.0)),\r\n+        ),\r\n+        child: Column(\r\n+          mainAxisSize: MainAxisSize.min,\r\n+          children: [\r\n+            Align(\r\n+              alignment: Alignment.centerLeft,\r\n+              child: Row(\r\n+                children: [\r\n+                  Padding(\r\n+                    padding: const EdgeInsets.only(right: 16.0),\r\n+                    child: ClickableWidget(\r\n+                      onTap: () {\r\n+                        const CloseOverlayNotification().dispatch(context);\r\n+                      },\r\n+                      child: const Icon(Icons.close),\r\n+                    ),\r\n+                  ),\r\n+                  Expanded(\r\n+                    child: TextField(\r\n+                      controller: textEditingController,\r\n+                      decoration: const InputDecoration(\r\n+                        hintText: \"Tag name\",\r\n+                        border: InputBorder.none,\r\n+                        contentPadding: EdgeInsets.zero,\r\n+                      ),\r\n+                      style: theme.textTheme.titleMedium?.copyWith(fontWeight: FontWeight.w800),\r\n+                    ),\r\n+                  ),\r\n+                ],\r\n+              ),\r\n+            ),\r\n+            const SizedBox(height: 8.0),\r\n+            ConstrainedBox(\r\n+              constraints: const BoxConstraints(maxHeight: 312),\r\n+              child: MouseScroll<ScrollController>(\r\n+                builder: (context, controller, physics) {\r\n+                  var colors = TagColors.selectable;\r\n+\r\n+                  return GridView.builder(\r\n+                    controller: controller,\r\n+                    physics: physics,\r\n+                    gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 5),\r\n+                    itemCount: colors.length,\r\n+                    itemBuilder: (context, index) => ClickableWidget(\r\n+                      onTap: () {\r\n+                        selectedColor.value = colors[index];\r\n+                      },\r\n+                      child: Padding(\r\n+                        padding: const EdgeInsets.all(4.0),\r\n+                        child: LayoutBuilder(\r\n+                          builder: (context, constraints) => Center(\r\n+                            child: Container(\r\n+                              width: constraints.maxWidth,\r\n+                              height: constraints.maxHeight,\r\n+                              decoration: BoxDecoration(\r\n+                                shape: BoxShape.circle,\r\n+                                color: colors[index],\r\n+                              ),\r\n+                              child: ValueListenableBuilder(\r\n+                                valueListenable: selectedColor,\r\n+                                builder: (context, selectedColor, child) => selectedColor != colors[index]\r\n+                                    ? const SizedBox()\r\n+                                    : Center(\r\n+                                        child: Container(\r\n+                                          width: constraints.maxWidth * 0.9,\r\n+                                          height: constraints.maxHeight * 0.9,\r\n+                                          decoration: BoxDecoration(\r\n+                                            shape: BoxShape.circle,\r\n+                                            color: selectedColor == colors[index] //\r\n+                                                ? FigmaColors.whiteAccent\r\n+                                                : colors[index],\r\n+                                          ),\r\n+                                          child: Center(\r\n+                                            child: Container(\r\n+                                              width: constraints.maxWidth * 0.75,\r\n+                                              height: constraints.maxHeight * 0.75,\r\n+                                              decoration: BoxDecoration(\r\n+                                                shape: BoxShape.circle,\r\n+                                                color: colors[index],\r\n+                                              ),\r\n+                                            ),\r\n+                                          ),\r\n+                                        ),\r\n+                                      ),\r\n+                              ),\r\n+                            ),\r\n+                          ),\r\n+                        ),\r\n+                      ),\r\n+                    ),\r\n+                  );\r\n+                },\r\n+              ),\r\n+            ),\r\n+            const SizedBox(height: 16.0),\r\n+            _TagWidget(\r\n+              tag: const CustomTag(\"Add new tag\", TagColors.addButton),\r\n+              icon: Icons.add,\r\n+              onTap: () {\r\n+                if (selectedColor.value case UserSelectableColor color) {\r\n+                  if (textEditingController case TextEditingController(:var text) when text.isNotEmpty) {\r\n+                    CreateNewTagOverlayNotification(color: color, name: text).dispatch(context);\r\n+                  }\r\n+                }\r\n+              },\r\n+            ),\r\n+          ],\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+/// Represents a simple removable tag.\r\n+class _TagWidget extends StatelessWidget {\r\n+  const _TagWidget({required this.tag, this.icon = Icons.close, this.onTap});\r\n+\r\n+  final Tag tag;\r\n+  final IconData? icon;\r\n+  final void Function()? onTap;\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return ClipRRect(\r\n+      borderRadius: BorderRadius.circular(16.0),\r\n+      child: ClickableWidget(\r\n+        onTap: onTap,\r\n+        child: SizedBox(\r\n+          height: _tagHeight,\r\n+          child: Material(\r\n+            color: tag.color,\r\n+            child: Padding(\r\n+              padding: const EdgeInsets.symmetric(horizontal: 16.0),\r\n+              child: icon == null\r\n+                  ? Row(\r\n+                      mainAxisSize: MainAxisSize.min,\r\n+                      children: [Text(tag.name, style: const TextStyle(color: Colors.white))],\r\n+                    )\r\n+                  : Row(\r\n+                      mainAxisSize: MainAxisSize.min,\r\n+                      children: [\r\n+                        Text(tag.name, style: const TextStyle(color: Colors.white)),\r\n+                        const SizedBox(width: _tagGapToIcon),\r\n+                        Icon(icon, size: _tagIconSize, color: Colors.white),\r\n+                      ],\r\n+                    ),\r\n+            ),\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1700145359594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,513 +249,30 @@\n                   ),\r\n               },\r\n             ),\r\n             const SizedBox(height: 16.0),\r\n-            _TagWidget(\r\n-              tag: const CustomTag(\"Create a new tag\", TagColors.addButton),\r\n-              icon: Icons.add,\r\n-              onTap: () => const SwitchToAddOverlayNotification().dispatch(context),\r\n-            ),\r\n-            const SizedBox(height: 8.0),\r\n-            _TagWidget(\r\n-              tag: const CustomTag(\"Modify existing tag\", TagColors.addButton),\r\n-              icon: Icons.edit,\r\n-              onTap: () {},\r\n-            ),\r\n-            const SizedBox(height: 8.0),\r\n-            _TagWidget(\r\n-              tag: const CustomTag(\"Remove  tag\", TagColors.addButton),\r\n-              icon: Icons.remove,\r\n-              onTap: () {},\r\n-            ),\r\n-          ],\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-class CreateTagOverlay extends StatefulWidget {\r\n-  const CreateTagOverlay({\r\n-    required this.tagData,\r\n-    super.key,\r\n-  });\r\n-\r\n-  final TagData tagData;\r\n-\r\n-  @override\r\n-  State<CreateTagOverlay> createState() => _CreateTagOverlayState();\r\n-}\r\n-\r\n-class _CreateTagOverlayState extends State<CreateTagOverlay> {\r\n-  late final TextEditingController textEditingController;\r\n-  late final ValueNotifier<UserSelectableColor?> selectedColor;\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-\r\n-    textEditingController = TextEditingController()\r\n-      ..addListener(() {\r\n-        print(\"Typing\");\r\n-      });\r\n-    selectedColor = ValueNotifier(null);\r\n-  }\r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    textEditingController.dispose();\r\n-    selectedColor.dispose();\r\n-\r\n-    super.dispose();\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    var theme = Theme.of(context);\r\n-\r\n-    return GestureDetector(\r\n-      behavior: HitTestBehavior.translucent,\r\n-      onTap: () {},\r\n-      child: Container(\r\n-        padding: const EdgeInsets.all(16.0),\r\n-        decoration: const BoxDecoration(\r\n-          color: FigmaColors.whiteAccent,\r\n-          borderRadius: BorderRadius.all(Radius.circular(5.0)),\r\n-        ),\r\n-        child: Column(\r\n-          mainAxisSize: MainAxisSize.min,\r\n-          children: [\r\n-            Align(\r\n-              alignment: Alignment.centerLeft,\r\n-              child: Row(\r\n-                children: [\r\n-                  Padding(\r\n-                    padding: const EdgeInsets.only(right: 16.0),\r\n-                    child: ClickableWidget(\r\n-                      onTap: () {\r\n-                        const CloseOverlayNotification().dispatch(context);\r\n-                      },\r\n-                      child: const Icon(Icons.close),\r\n-                    ),\r\n-                  ),\r\n-                  Expanded(\r\n-                    child: TextField(\r\n-                      controller: textEditingController,\r\n-                      decoration: const InputDecoration(\r\n-                        hintText: \"Tag name\",\r\n-                        border: InputBorder.none,\r\n-                        contentPadding: EdgeInsets.zero,\r\n-                      ),\r\n-                      style: theme.textTheme.titleMedium?.copyWith(fontWeight: FontWeight.w800),\r\n-                    ),\r\n-                  ),\r\n-                ],\r\n-              ),\r\n-            ),\r\n-            const SizedBox(height: 8.0),\r\n-            ConstrainedBox(\r\n-              constraints: const BoxConstraints(maxHeight: 312),\r\n-              child: MouseScroll<ScrollController>(\r\n-                builder: (context, controller, physics) {\r\n-                  var colors = TagColors.selectable;\r\n-\r\n-                  return GridView.builder(\r\n-                    controller: controller,\r\n-                    physics: physics,\r\n-                    gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 5),\r\n-                    itemCount: colors.length,\r\n-                    itemBuilder: (context, index) => ClickableWidget(\r\n-                      onTap: () {\r\n-                        selectedColor.value = colors[index];\r\n-                      },\r\n-                      child: Padding(\r\n-                        padding: const EdgeInsets.all(4.0),\r\n-                        child: LayoutBuilder(\r\n-                          builder: (context, constraints) => Center(\r\n-                            child: Container(\r\n-                              width: constraints.maxWidth,\r\n-                              height: constraints.maxHeight,\r\n-                              decoration: BoxDecoration(\r\n-                                shape: BoxShape.circle,\r\n-                                color: colors[index],\r\n-                              ),\r\n-                              child: ValueListenableBuilder(\r\n-                                valueListenable: selectedColor,\r\n-                                builder: (context, selectedColor, child) => selectedColor != colors[index]\r\n-                                    ? const SizedBox()\r\n-                                    : Center(\r\n-                                        child: Container(\r\n-                                          width: constraints.maxWidth * 0.9,\r\n-                                          height: constraints.maxHeight * 0.9,\r\n-                                          decoration: BoxDecoration(\r\n-                                            shape: BoxShape.circle,\r\n-                                            color: selectedColor == colors[index] //\r\n-                                                ? FigmaColors.whiteAccent\r\n-                                                : colors[index],\r\n-                                          ),\r\n-                                          child: Center(\r\n-                                            child: Container(\r\n-                                              width: constraints.maxWidth * 0.75,\r\n-                                              height: constraints.maxHeight * 0.75,\r\n-                                              decoration: BoxDecoration(\r\n-                                                shape: BoxShape.circle,\r\n-                                                color: colors[index],\r\n-                                              ),\r\n-                                            ),\r\n-                                          ),\r\n-                                        ),\r\n-                                      ),\r\n-                              ),\r\n-                            ),\r\n-                          ),\r\n-                        ),\r\n-                      ),\r\n-                    ),\r\n-                  );\r\n-                },\r\n-              ),\r\n-            ),\r\n-            const SizedBox(height: 16.0),\r\n-            _TagWidget(\r\n-              tag: const CustomTag(\"Add new tag\", TagColors.addButton),\r\n-              icon: Icons.add,\r\n-              onTap: () {\r\n-                if (selectedColor.value case UserSelectableColor color) {\r\n-                  if (textEditingController case TextEditingController(:var text) when text.isNotEmpty) {\r\n-                    CreateNewTagOverlayNotification(color: color, name: text).dispatch(context);\r\n-                  }\r\n-                }\r\n-              },\r\n-            ),\r\n-          ],\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-/// Represents a simple removable tag.\r\n-class _TagWidget extends StatelessWidget {\r\n-  const _TagWidget({required this.tag, this.icon = Icons.close, this.onTap});\r\n-\r\n-  final Tag tag;\r\n-  final IconData? icon;\r\n-  final void Function()? onTap;\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return ClipRRect(\r\n-      borderRadius: BorderRadius.circular(16.0),\r\n-      child: ClickableWidget(\r\n-        onTap: onTap,\r\n-        child: SizedBox(\r\n-          height: _tagHeight,\r\n-          child: Material(\r\n-            color: tag.color,\r\n-            child: Padding(\r\n-              padding: const EdgeInsets.symmetric(horizontal: 16.0),\r\n-              child: icon == null\r\n-                  ? Row(\r\n-                      mainAxisSize: MainAxisSize.min,\r\n-                      children: [Text(tag.name, style: const TextStyle(color: Colors.white))],\r\n-                    )\r\n-                  : Row(\r\n-                      mainAxisSize: MainAxisSize.min,\r\n-                      children: [\r\n-                        Text(tag.name, style: const TextStyle(color: Colors.white)),\r\n-                        const SizedBox(width: _tagGapToIcon),\r\n-                        Icon(icon, size: _tagIconSize, color: Colors.white),\r\n-                      ],\r\n-                    ),\r\n-            ),\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-import \"dart:async\";\r\n-import \"dart:ui\";\r\n-\r\n-import \"package:flutter/material.dart\";\r\n-import \"package:fridgital/back_end/tag_data.dart\";\r\n-import \"package:fridgital/shared/classes/selected_color.dart\";\r\n-import \"package:fridgital/shared/constants.dart\";\r\n-import \"package:fridgital/widgets/shared/miscellaneous/clickable_widget.dart\";\r\n-import \"package:fridgital/widgets/shared/miscellaneous/tags_view/notifications.dart\";\r\n-import \"package:mouse_scroll/mouse_scroll.dart\";\r\n-import \"package:provider/provider.dart\";\r\n-\r\n-const _tagIconSize = 14.0;\r\n-const _tagHeight = 32.0;\r\n-const _tagGapToIcon = 16.0;\r\n-\r\n-class TagsView extends StatelessWidget {\r\n-  const TagsView({super.key});\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    var tagData = context.watch<TagData>();\r\n-\r\n-    return Wrap(\r\n-      runSpacing: 8.0,\r\n-      children: [\r\n-        for (var tag in tagData.activeTags)\r\n-          Padding(\r\n-            padding: const EdgeInsets.only(right: 4.0),\r\n-            child: _TagWidget(\r\n-              tag: tag,\r\n-              onTap: () {\r\n-                tagData.removeTag(tag);\r\n-              },\r\n-            ),\r\n-          ),\r\n-        const Padding(\r\n-          padding: EdgeInsets.only(right: 4.0),\r\n-          child: TagSelector(),\r\n-        ),\r\n-      ],\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-enum OverlayMode {\r\n-  select,\r\n-  add,\r\n-}\r\n-\r\n-class TagSelector extends StatefulWidget {\r\n-  const TagSelector({super.key});\r\n-\r\n-  @override\r\n-  State<TagSelector> createState() => _TagSelectorState();\r\n-}\r\n-\r\n-class _TagSelectorState extends State<TagSelector> with TickerProviderStateMixin {\r\n-  void Function() tapHandler(BuildContext context, BoxConstraints constraints) {\r\n-    return () {\r\n-      if (!context.mounted) {\r\n-        return;\r\n-      }\r\n-\r\n-      var tagData = context.read<TagData>();\r\n-      var animationController = AnimationController(vsync: this, duration: const Duration(milliseconds: 250));\r\n-      var overlayConstraints = BoxConstraints(maxWidth: constraints.maxWidth * 0.9);\r\n-      var overlayMode = ValueNotifier(OverlayMode.select);\r\n-\r\n-      late OverlayEntry entry;\r\n-\r\n-      void dispose() {\r\n-        animationController.dispose();\r\n-        entry.remove();\r\n-      }\r\n-\r\n-      void init() {\r\n-        Overlay.of(context).insert(entry);\r\n-        animationController.forward();\r\n-      }\r\n-\r\n-      entry = OverlayEntry(\r\n-        maintainState: true,\r\n-        builder: (_) => NotificationListener<OverlayNotification>(\r\n-          onNotification: (notification) {\r\n-            unawaited(() async {\r\n-              switch (notification) {\r\n-                transition_to_select:\r\n-                case SwitchToSelectOverlayNotification():\r\n-                  await animationController.reverse(from: 1.0);\r\n-                  overlayMode.value = OverlayMode.select;\r\n-                  await animationController.forward();\r\n-                case SwitchToAddOverlayNotification():\r\n-                  await animationController.reverse(from: 1.0);\r\n-                  overlayMode.value = OverlayMode.add;\r\n-                  await animationController.forward();\r\n-\r\n-                case SelectedTagOverlayNotification(:Tag tag):\r\n-                  await animationController.reverse();\r\n-                  tagData.addTag(tag);\r\n-                  dispose();\r\n-                case CloseOverlayNotification():\r\n-                  await animationController.reverse(from: 1.0);\r\n-                  dispose();\r\n-                case CreateNewTagOverlayNotification(:var name, :var color):\r\n-                  var tag = CustomTag(name, color);\r\n-                  await tagData.addAddableTag(tag);\r\n-\r\n-                  continue transition_to_select;\r\n-              }\r\n-            }());\r\n-\r\n-            return true;\r\n-          },\r\n-          child: GestureDetector(\r\n-            behavior: HitTestBehavior.translucent,\r\n-            onTap: () async {\r\n-              await animationController.reverse();\r\n-              dispose();\r\n-            },\r\n-            child: Scaffold(\r\n-              backgroundColor: const Color(0x7fCCAEBB),\r\n-              body: BackdropFilter(\r\n-                filter: ImageFilter.blur(sigmaX: 1.5, sigmaY: 1.5),\r\n-                child: ValueListenableBuilder(\r\n-                  valueListenable: overlayMode,\r\n-                  builder: (context, overlayMode, child) => Center(\r\n-                    child: AnimatedBuilder(\r\n-                      animation: animationController,\r\n-                      builder: (context, child) => Opacity(\r\n-                        opacity: animationController.value,\r\n-                        child: Transform.scale(\r\n-                          scale: (0.8 + animationController.value).clamp(0.0, 1.0),\r\n-                          alignment: Alignment.topCenter,\r\n-                          child: ConstrainedBox(\r\n-                            constraints: overlayConstraints,\r\n-                            child: child,\r\n-                          ),\r\n-                        ),\r\n-                      ),\r\n-                      child: switch (overlayMode) {\r\n-                        OverlayMode.select => SelectTagOverlay(tagData: tagData),\r\n-                        OverlayMode.add => CreateTagOverlay(tagData: tagData),\r\n-                      },\r\n-                    ),\r\n-                  ),\r\n+            Wrap(\r\n+              sp\r\n+              children: [\r\n+                _TagWidget(\r\n+                  tag: const CustomTag(\"Create\", TagColors.addButton),\r\n+                  icon: Icons.add,\r\n+                  onTap: () => const SwitchToAddOverlayNotification().dispatch(context),\r\n                 ),\r\n-              ),\r\n-            ),\r\n-          ),\r\n-        ),\r\n-      );\r\n-\r\n-      init();\r\n-    };\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return LayoutBuilder(\r\n-      builder: (context, constraints) => ClipRRect(\r\n-        borderRadius: BorderRadius.circular(16.0),\r\n-        child: ClickableWidget(\r\n-          onTap: tapHandler(context, constraints),\r\n-          child: Container(\r\n-            height: _tagHeight,\r\n-            color: TagColors.selector,\r\n-            child: const IgnorePointer(\r\n-              child: Padding(\r\n-                padding: EdgeInsets.symmetric(horizontal: 16.0),\r\n-                child: Row(\r\n-                  mainAxisSize: MainAxisSize.min,\r\n-                  children: [\r\n-                    Text(\"filter\", style: TextStyle(color: Colors.white)),\r\n-                    SizedBox(width: _tagGapToIcon),\r\n-                    Icon(Icons.add, size: _tagIconSize, color: Colors.white),\r\n-                  ],\r\n+                const SizedBox(height: 8.0),\r\n+                _TagWidget(\r\n+                  tag: const CustomTag(\"Modify\", TagColors.addButton),\r\n+                  icon: Icons.edit,\r\n+                  onTap: () {},\r\n                 ),\r\n-              ),\r\n+                const SizedBox(height: 8.0),\r\n+                _TagWidget(\r\n+                  tag: const CustomTag(\"Remove\", TagColors.addButton),\r\n+                  icon: Icons.remove,\r\n+                  onTap: () {},\r\n+                ),\r\n+              ],\r\n             ),\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-class SelectTagOverlay extends StatelessWidget {\r\n-  const SelectTagOverlay({required this.tagData, super.key});\r\n-\r\n-  final TagData tagData;\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    var theme = Theme.of(context);\r\n-    var TagData(:activeTags, :addableTags) = tagData;\r\n-    var availableTags = addableTags.difference(activeTags);\r\n-\r\n-    return GestureDetector(\r\n-      behavior: HitTestBehavior.translucent,\r\n-      onTap: () {},\r\n-      child: Container(\r\n-        padding: const EdgeInsets.all(16.0),\r\n-        decoration: const BoxDecoration(\r\n-          color: FigmaColors.whiteAccent,\r\n-          borderRadius: BorderRadius.all(Radius.circular(5.0)),\r\n-        ),\r\n-        child: Column(\r\n-          mainAxisSize: MainAxisSize.min,\r\n-          children: [\r\n-            Align(\r\n-              alignment: Alignment.centerLeft,\r\n-              child: Row(\r\n-                children: [\r\n-                  Padding(\r\n-                    padding: const EdgeInsets.only(right: 16.0),\r\n-                    child: ClickableWidget(\r\n-                      onTap: () => const CloseOverlayNotification().dispatch(context),\r\n-                      child: const Icon(Icons.close),\r\n-                    ),\r\n-                  ),\r\n-                  Text(\r\n-                    \"SELECT A TAG\",\r\n-                    style: theme.textTheme.titleMedium?.copyWith(fontWeight: FontWeight.w800),\r\n-                  ),\r\n-                ],\r\n-              ),\r\n-            ),\r\n-            const SizedBox(height: 8.0),\r\n-            ConstrainedBox(\r\n-              constraints: const BoxConstraints(maxHeight: 312),\r\n-              child: switch (availableTags.length) {\r\n-                0 => const SizedBox(),\r\n-                _ => MouseSingleChildScrollView(\r\n-                    child: Wrap(\r\n-                      runSpacing: 8.0,\r\n-                      children: [\r\n-                        for (var tag in availableTags)\r\n-                          Padding(\r\n-                            padding: const EdgeInsets.only(right: 4.0),\r\n-                            child: _TagWidget(\r\n-                              tag: tag,\r\n-                              icon: null,\r\n-                              onTap: () => SelectedTagOverlayNotification(tag).dispatch(context),\r\n-                            ),\r\n-                          ),\r\n-                      ],\r\n-                    ),\r\n-                  ),\r\n-              },\r\n-            ),\r\n-            const SizedBox(height: 16.0),\r\n-            _TagWidget(\r\n-              tag: const CustomTag(\"Create a new tag\", TagColors.addButton),\r\n-              icon: Icons.add,\r\n-              onTap: () => const SwitchToAddOverlayNotification().dispatch(context),\r\n-            ),\r\n-            const SizedBox(height: 8.0),\r\n-            _TagWidget(\r\n-              tag: const CustomTag(\"Modify existing tag\", TagColors.addButton),\r\n-              icon: Icons.edit,\r\n-              onTap: () {\r\n-                if (selectedColor.value case UserSelectableColor color) {\r\n-                  if (textEditingController case TextEditingController(:var text) when text.isNotEmpty) {\r\n-                    CreateNewTagOverlayNotification(color: color, name: text).dispatch(context);\r\n-                  }\r\n-                }\r\n-              },\r\n-            ),\r\n-            const SizedBox(height: 8.0),\r\n-            _TagWidget(\r\n-              tag: const CustomTag(\"Remove existing tag\", TagColors.addButton),\r\n-              icon: Icons.remove,\r\n-              onTap: () {\r\n-                if (selectedColor.value case UserSelectableColor color) {\r\n-                  if (textEditingController case TextEditingController(:var text) when text.isNotEmpty) {\r\n-                    CreateNewTagOverlayNotification(color: color, name: text).dispatch(context);\r\n-                  }\r\n-                }\r\n-              },\r\n-            ),\r\n           ],\r\n         ),\r\n       ),\r\n     );\r\n@@ -914,32 +431,8 @@\n                   }\r\n                 }\r\n               },\r\n             ),\r\n-            const SizedBox(height: 8.0),\r\n-            _TagWidget(\r\n-              tag: const CustomTag(\"Modify existing tag\", TagColors.e),\r\n-              icon: Icons.add,\r\n-              onTap: () {\r\n-                if (selectedColor.value case UserSelectableColor color) {\r\n-                  if (textEditingController case TextEditingController(:var text) when text.isNotEmpty) {\r\n-                    CreateNewTagOverlayNotification(color: color, name: text).dispatch(context);\r\n-                  }\r\n-                }\r\n-              },\r\n-            ),\r\n-            const SizedBox(height: 8.0),\r\n-            _TagWidget(\r\n-              tag: const CustomTag(\"Remove existing tag\", TagColors.addButton),\r\n-              icon: Icons.add,\r\n-              onTap: () {\r\n-                if (selectedColor.value case UserSelectableColor color) {\r\n-                  if (textEditingController case TextEditingController(:var text) when text.isNotEmpty) {\r\n-                    CreateNewTagOverlayNotification(color: color, name: text).dispatch(context);\r\n-                  }\r\n-                }\r\n-              },\r\n-            ),\r\n           ],\r\n         ),\r\n       ),\r\n     );\r\n"
                },
                {
                    "date": 1700145413956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -255,9 +255,9 @@\n               spacing: 2.0,\r\n               runSpacing: 8.0,\r\n               children: [\r\n                 _TagWidget(\r\n-                  tag: const CustomTag(\"Create\", TagColors.addButton),\r\n+                  tag: const CustomTag(\"A\", TagColors.addButton),\r\n                   icon: Icons.add,\r\n                   onTap: () => const SwitchToAddOverlayNotification().dispatch(context),\r\n                 ),\r\n                 const SizedBox(height: 8.0),\r\n"
                },
                {
                    "date": 1700145454915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,483 @@\n+import \"dart:async\";\r\n+import \"dart:ui\";\r\n+\r\n+import \"package:flutter/material.dart\";\r\n+import \"package:fridgital/back_end/tag_data.dart\";\r\n+import \"package:fridgital/shared/classes/selected_color.dart\";\r\n+import \"package:fridgital/shared/constants.dart\";\r\n+import \"package:fridgital/widgets/shared/miscellaneous/clickable_widget.dart\";\r\n+import \"package:fridgital/widgets/shared/miscellaneous/tags_view/notifications.dart\";\r\n+import \"package:mouse_scroll/mouse_scroll.dart\";\r\n+import \"package:provider/provider.dart\";\r\n+\r\n+const _tagIconSize = 14.0;\r\n+const _tagHeight = 32.0;\r\n+const _tagGapToIcon = 16.0;\r\n+\r\n+class TagsView extends StatelessWidget {\r\n+  const TagsView({super.key});\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    var tagData = context.watch<TagData>();\r\n+\r\n+    return Wrap(\r\n+      runSpacing: 8.0,\r\n+      children: [\r\n+        for (var tag in tagData.activeTags)\r\n+          Padding(\r\n+            padding: const EdgeInsets.only(right: 4.0),\r\n+            child: _TagWidget(\r\n+              tag: tag,\r\n+              onTap: () {\r\n+                tagData.removeTag(tag);\r\n+              },\r\n+            ),\r\n+          ),\r\n+        const Padding(\r\n+          padding: EdgeInsets.only(right: 4.0),\r\n+          child: TagSelector(),\r\n+        ),\r\n+      ],\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+enum OverlayMode {\r\n+  select,\r\n+  add,\r\n+}\r\n+\r\n+class TagSelector extends StatefulWidget {\r\n+  const TagSelector({super.key});\r\n+\r\n+  @override\r\n+  State<TagSelector> createState() => _TagSelectorState();\r\n+}\r\n+\r\n+class _TagSelectorState extends State<TagSelector> with TickerProviderStateMixin {\r\n+  void Function() tapHandler(BuildContext context, BoxConstraints constraints) {\r\n+    return () {\r\n+      if (!context.mounted) {\r\n+        return;\r\n+      }\r\n+\r\n+      var tagData = context.read<TagData>();\r\n+      var animationController = AnimationController(vsync: this, duration: const Duration(milliseconds: 250));\r\n+      var overlayConstraints = BoxConstraints(maxWidth: constraints.maxWidth * 0.9);\r\n+      var overlayMode = ValueNotifier(OverlayMode.select);\r\n+\r\n+      late OverlayEntry entry;\r\n+\r\n+      void dispose() {\r\n+        animationController.dispose();\r\n+        entry.remove();\r\n+      }\r\n+\r\n+      void init() {\r\n+        Overlay.of(context).insert(entry);\r\n+        animationController.forward();\r\n+      }\r\n+\r\n+      entry = OverlayEntry(\r\n+        maintainState: true,\r\n+        builder: (_) => NotificationListener<OverlayNotification>(\r\n+          onNotification: (notification) {\r\n+            unawaited(() async {\r\n+              switch (notification) {\r\n+                transition_to_select:\r\n+                case SwitchToSelectOverlayNotification():\r\n+                  await animationController.reverse(from: 1.0);\r\n+                  overlayMode.value = OverlayMode.select;\r\n+                  await animationController.forward();\r\n+                case SwitchToAddOverlayNotification():\r\n+                  await animationController.reverse(from: 1.0);\r\n+                  overlayMode.value = OverlayMode.add;\r\n+                  await animationController.forward();\r\n+\r\n+                case SelectedTagOverlayNotification(:Tag tag):\r\n+                  await animationController.reverse();\r\n+                  tagData.addTag(tag);\r\n+                  dispose();\r\n+                case CloseOverlayNotification():\r\n+                  await animationController.reverse(from: 1.0);\r\n+                  dispose();\r\n+                case CreateNewTagOverlayNotification(:var name, :var color):\r\n+                  var tag = CustomTag(name, color);\r\n+                  await tagData.addAddableTag(tag);\r\n+\r\n+                  continue transition_to_select;\r\n+              }\r\n+            }());\r\n+\r\n+            return true;\r\n+          },\r\n+          child: GestureDetector(\r\n+            behavior: HitTestBehavior.translucent,\r\n+            onTap: () async {\r\n+              await animationController.reverse();\r\n+              dispose();\r\n+            },\r\n+            child: Scaffold(\r\n+              backgroundColor: const Color(0x7fCCAEBB),\r\n+              body: BackdropFilter(\r\n+                filter: ImageFilter.blur(sigmaX: 1.5, sigmaY: 1.5),\r\n+                child: ValueListenableBuilder(\r\n+                  valueListenable: overlayMode,\r\n+                  builder: (context, overlayMode, child) => Center(\r\n+                    child: AnimatedBuilder(\r\n+                      animation: animationController,\r\n+                      builder: (context, child) => Opacity(\r\n+                        opacity: animationController.value,\r\n+                        child: Transform.scale(\r\n+                          scale: (0.8 + animationController.value).clamp(0.0, 1.0),\r\n+                          alignment: Alignment.topCenter,\r\n+                          child: ConstrainedBox(\r\n+                            constraints: overlayConstraints,\r\n+                            child: child,\r\n+                          ),\r\n+                        ),\r\n+                      ),\r\n+                      child: switch (overlayMode) {\r\n+                        OverlayMode.select => SelectTagOverlay(tagData: tagData),\r\n+                        OverlayMode.add => CreateTagOverlay(tagData: tagData),\r\n+                      },\r\n+                    ),\r\n+                  ),\r\n+                ),\r\n+              ),\r\n+            ),\r\n+          ),\r\n+        ),\r\n+      );\r\n+\r\n+      init();\r\n+    };\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return LayoutBuilder(\r\n+      builder: (context, constraints) => ClipRRect(\r\n+        borderRadius: BorderRadius.circular(16.0),\r\n+        child: ClickableWidget(\r\n+          onTap: tapHandler(context, constraints),\r\n+          child: Container(\r\n+            height: _tagHeight,\r\n+            color: TagColors.selector,\r\n+            child: const IgnorePointer(\r\n+              child: Padding(\r\n+                padding: EdgeInsets.symmetric(horizontal: 16.0),\r\n+                child: Row(\r\n+                  mainAxisSize: MainAxisSize.min,\r\n+                  children: [\r\n+                    Text(\"filter\", style: TextStyle(color: Colors.white)),\r\n+                    SizedBox(width: _tagGapToIcon),\r\n+                    Icon(Icons.add, size: _tagIconSize, color: Colors.white),\r\n+                  ],\r\n+                ),\r\n+              ),\r\n+            ),\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+class SelectTagOverlay extends StatelessWidget {\r\n+  const SelectTagOverlay({required this.tagData, super.key});\r\n+\r\n+  final TagData tagData;\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    var theme = Theme.of(context);\r\n+    var TagData(:activeTags, :addableTags) = tagData;\r\n+    var availableTags = addableTags.difference(activeTags);\r\n+\r\n+    return GestureDetector(\r\n+      behavior: HitTestBehavior.translucent,\r\n+      onTap: () {},\r\n+      child: Container(\r\n+        padding: const EdgeInsets.all(16.0),\r\n+        decoration: const BoxDecoration(\r\n+          color: FigmaColors.whiteAccent,\r\n+          borderRadius: BorderRadius.all(Radius.circular(5.0)),\r\n+        ),\r\n+        child: Column(\r\n+          mainAxisSize: MainAxisSize.min,\r\n+          children: [\r\n+            Align(\r\n+              alignment: Alignment.centerLeft,\r\n+              child: Row(\r\n+                children: [\r\n+                  Padding(\r\n+                    padding: const EdgeInsets.only(right: 16.0),\r\n+                    child: ClickableWidget(\r\n+                      onTap: () => const CloseOverlayNotification().dispatch(context),\r\n+                      child: const Icon(Icons.close),\r\n+                    ),\r\n+                  ),\r\n+                  Text(\r\n+                    \"SELECT A TAG\",\r\n+                    style: theme.textTheme.titleMedium?.copyWith(fontWeight: FontWeight.w800),\r\n+                  ),\r\n+                ],\r\n+              ),\r\n+            ),\r\n+            const SizedBox(height: 8.0),\r\n+            ConstrainedBox(\r\n+              constraints: const BoxConstraints(maxHeight: 312),\r\n+              child: switch (availableTags.length) {\r\n+                0 => const SizedBox(),\r\n+                _ => MouseSingleChildScrollView(\r\n+                    child: Wrap(\r\n+                      runSpacing: 8.0,\r\n+                      children: [\r\n+                        for (var tag in availableTags)\r\n+                          Padding(\r\n+                            padding: const EdgeInsets.only(right: 4.0),\r\n+                            child: _TagWidget(\r\n+                              tag: tag,\r\n+                              icon: null,\r\n+                              onTap: () => SelectedTagOverlayNotification(tag).dispatch(context),\r\n+                            ),\r\n+                          ),\r\n+                      ],\r\n+                    ),\r\n+                  ),\r\n+              },\r\n+            ),\r\n+            const SizedBox(height: 16.0),\r\n+            R(\r\n+              alignment: WrapAlignment.center,\r\n+              spacing: 2.0,\r\n+              runSpacing: 8.0,\r\n+              children: [\r\n+                _TagWidget(\r\n+                  tag: const CustomTag(\"Add\", TagColors.addButton),\r\n+                  icon: Icons.add,\r\n+                  onTap: () => const SwitchToAddOverlayNotification().dispatch(context),\r\n+                ),\r\n+                const SizedBox(height: 8.0),\r\n+                _TagWidget(\r\n+                  tag: const CustomTag(\"Edit\", TagColors.addButton),\r\n+                  icon: Icons.edit,\r\n+                  onTap: () {},\r\n+                ),\r\n+                const SizedBox(height: 8.0),\r\n+                _TagWidget(\r\n+                  tag: const CustomTag(\"Delete\", TagColors.addButton),\r\n+                  icon: Icons.remove,\r\n+                  onTap: () {},\r\n+                ),\r\n+              ],\r\n+            ),\r\n+          ],\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+class CreateTagOverlay extends StatefulWidget {\r\n+  const CreateTagOverlay({\r\n+    required this.tagData,\r\n+    super.key,\r\n+  });\r\n+\r\n+  final TagData tagData;\r\n+\r\n+  @override\r\n+  State<CreateTagOverlay> createState() => _CreateTagOverlayState();\r\n+}\r\n+\r\n+class _CreateTagOverlayState extends State<CreateTagOverlay> {\r\n+  late final TextEditingController textEditingController;\r\n+  late final ValueNotifier<UserSelectableColor?> selectedColor;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+\r\n+    textEditingController = TextEditingController()\r\n+      ..addListener(() {\r\n+        print(\"Typing\");\r\n+      });\r\n+    selectedColor = ValueNotifier(null);\r\n+  }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    textEditingController.dispose();\r\n+    selectedColor.dispose();\r\n+\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    var theme = Theme.of(context);\r\n+\r\n+    return GestureDetector(\r\n+      behavior: HitTestBehavior.translucent,\r\n+      onTap: () {},\r\n+      child: Container(\r\n+        padding: const EdgeInsets.all(16.0),\r\n+        decoration: const BoxDecoration(\r\n+          color: FigmaColors.whiteAccent,\r\n+          borderRadius: BorderRadius.all(Radius.circular(5.0)),\r\n+        ),\r\n+        child: Column(\r\n+          mainAxisSize: MainAxisSize.min,\r\n+          children: [\r\n+            Align(\r\n+              alignment: Alignment.centerLeft,\r\n+              child: Row(\r\n+                children: [\r\n+                  Padding(\r\n+                    padding: const EdgeInsets.only(right: 16.0),\r\n+                    child: ClickableWidget(\r\n+                      onTap: () {\r\n+                        const CloseOverlayNotification().dispatch(context);\r\n+                      },\r\n+                      child: const Icon(Icons.close),\r\n+                    ),\r\n+                  ),\r\n+                  Expanded(\r\n+                    child: TextField(\r\n+                      controller: textEditingController,\r\n+                      decoration: const InputDecoration(\r\n+                        hintText: \"Tag name\",\r\n+                        border: InputBorder.none,\r\n+                        contentPadding: EdgeInsets.zero,\r\n+                      ),\r\n+                      style: theme.textTheme.titleMedium?.copyWith(fontWeight: FontWeight.w800),\r\n+                    ),\r\n+                  ),\r\n+                ],\r\n+              ),\r\n+            ),\r\n+            const SizedBox(height: 8.0),\r\n+            ConstrainedBox(\r\n+              constraints: const BoxConstraints(maxHeight: 312),\r\n+              child: MouseScroll<ScrollController>(\r\n+                builder: (context, controller, physics) {\r\n+                  var colors = TagColors.selectable;\r\n+\r\n+                  return GridView.builder(\r\n+                    controller: controller,\r\n+                    physics: physics,\r\n+                    gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 5),\r\n+                    itemCount: colors.length,\r\n+                    itemBuilder: (context, index) => ClickableWidget(\r\n+                      onTap: () {\r\n+                        selectedColor.value = colors[index];\r\n+                      },\r\n+                      child: Padding(\r\n+                        padding: const EdgeInsets.all(4.0),\r\n+                        child: LayoutBuilder(\r\n+                          builder: (context, constraints) => Center(\r\n+                            child: Container(\r\n+                              width: constraints.maxWidth,\r\n+                              height: constraints.maxHeight,\r\n+                              decoration: BoxDecoration(\r\n+                                shape: BoxShape.circle,\r\n+                                color: colors[index],\r\n+                              ),\r\n+                              child: ValueListenableBuilder(\r\n+                                valueListenable: selectedColor,\r\n+                                builder: (context, selectedColor, child) => selectedColor != colors[index]\r\n+                                    ? const SizedBox()\r\n+                                    : Center(\r\n+                                        child: Container(\r\n+                                          width: constraints.maxWidth * 0.9,\r\n+                                          height: constraints.maxHeight * 0.9,\r\n+                                          decoration: BoxDecoration(\r\n+                                            shape: BoxShape.circle,\r\n+                                            color: selectedColor == colors[index] //\r\n+                                                ? FigmaColors.whiteAccent\r\n+                                                : colors[index],\r\n+                                          ),\r\n+                                          child: Center(\r\n+                                            child: Container(\r\n+                                              width: constraints.maxWidth * 0.75,\r\n+                                              height: constraints.maxHeight * 0.75,\r\n+                                              decoration: BoxDecoration(\r\n+                                                shape: BoxShape.circle,\r\n+                                                color: colors[index],\r\n+                                              ),\r\n+                                            ),\r\n+                                          ),\r\n+                                        ),\r\n+                                      ),\r\n+                              ),\r\n+                            ),\r\n+                          ),\r\n+                        ),\r\n+                      ),\r\n+                    ),\r\n+                  );\r\n+                },\r\n+              ),\r\n+            ),\r\n+            const SizedBox(height: 16.0),\r\n+            _TagWidget(\r\n+              tag: const CustomTag(\"Add new tag\", TagColors.addButton),\r\n+              icon: Icons.add,\r\n+              onTap: () {\r\n+                if (selectedColor.value case UserSelectableColor color) {\r\n+                  if (textEditingController case TextEditingController(:var text) when text.isNotEmpty) {\r\n+                    CreateNewTagOverlayNotification(color: color, name: text).dispatch(context);\r\n+                  }\r\n+                }\r\n+              },\r\n+            ),\r\n+          ],\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+/// Represents a simple removable tag.\r\n+class _TagWidget extends StatelessWidget {\r\n+  const _TagWidget({required this.tag, this.icon = Icons.close, this.onTap});\r\n+\r\n+  final Tag tag;\r\n+  final IconData? icon;\r\n+  final void Function()? onTap;\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return ClipRRect(\r\n+      borderRadius: BorderRadius.circular(16.0),\r\n+      child: ClickableWidget(\r\n+        onTap: onTap,\r\n+        child: SizedBox(\r\n+          height: _tagHeight,\r\n+          child: Material(\r\n+            color: tag.color,\r\n+            child: Padding(\r\n+              padding: const EdgeInsets.symmetric(horizontal: 16.0),\r\n+              child: icon == null\r\n+                  ? Row(\r\n+                      mainAxisSize: MainAxisSize.min,\r\n+                      children: [Text(tag.name, style: const TextStyle(color: Colors.white))],\r\n+                    )\r\n+                  : Row(\r\n+                      mainAxisSize: MainAxisSize.min,\r\n+                      children: [\r\n+                        Text(tag.name, style: const TextStyle(color: Colors.white)),\r\n+                        const SizedBox(width: _tagGapToIcon),\r\n+                        Icon(icon, size: _tagIconSize, color: Colors.white),\r\n+                      ],\r\n+                    ),\r\n+            ),\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                }
            ],
            "date": 1700133929132,
            "name": "Commit-0",
            "content": "import \"dart:async\";\r\nimport \"dart:ui\";\r\n\r\nimport \"package:flutter/material.dart\";\r\nimport \"package:fridgital/back_end/tag_data.dart\";\r\nimport \"package:fridgital/shared/classes/selected_color.dart\";\r\nimport \"package:fridgital/shared/constants.dart\";\r\nimport \"package:fridgital/widgets/shared/miscellaneous/clickable_widget.dart\";\r\nimport \"package:fridgital/widgets/shared/miscellaneous/tags_view/notifications.dart\";\r\nimport \"package:mouse_scroll/mouse_scroll.dart\";\r\nimport \"package:provider/provider.dart\";\r\n\r\nconst _tagIconSize = 14.0;\r\nconst _tagHeight = 32.0;\r\nconst _tagGapToIcon = 16.0;\r\n\r\nclass TagsView extends StatelessWidget {\r\n  const TagsView({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    var tagData = context.watch<TagData>();\r\n\r\n    return Wrap(\r\n      runSpacing: 8.0,\r\n      children: [\r\n        for (var tag in tagData.activeTags)\r\n          Padding(\r\n            padding: const EdgeInsets.only(right: 4.0),\r\n            child: _TagWidget(\r\n              tag: tag,\r\n              onTap: () {\r\n                tagData.removeTag(tag);\r\n              },\r\n            ),\r\n          ),\r\n        const Padding(\r\n          padding: EdgeInsets.only(right: 4.0),\r\n          child: TagSelector(),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n}\r\n\r\nenum OverlayMode {\r\n  select,\r\n  add,\r\n}\r\n\r\nclass TagSelector extends StatefulWidget {\r\n  const TagSelector({super.key});\r\n\r\n  @override\r\n  State<TagSelector> createState() => _TagSelectorState();\r\n}\r\n\r\nclass _TagSelectorState extends State<TagSelector> with TickerProviderStateMixin {\r\n  void Function() tapHandler(BuildContext context, BoxConstraints constraints) {\r\n    return () {\r\n      if (!context.mounted) {\r\n        return;\r\n      }\r\n\r\n      var tagData = context.read<TagData>();\r\n      var animationController = AnimationController(vsync: this, duration: const Duration(milliseconds: 250));\r\n      var overlayConstraints = BoxConstraints(maxWidth: constraints.maxWidth * 0.9);\r\n      var overlayMode = ValueNotifier(OverlayMode.select);\r\n\r\n      late OverlayEntry entry;\r\n\r\n      void dispose() {\r\n        animationController.dispose();\r\n        entry.remove();\r\n      }\r\n\r\n      void init() {\r\n        Overlay.of(context).insert(entry);\r\n        animationController.forward();\r\n      }\r\n\r\n      entry = OverlayEntry(\r\n        maintainState: true,\r\n        builder: (_) => NotificationListener<OverlayNotification>(\r\n          onNotification: (notification) {\r\n            unawaited(() async {\r\n              switch (notification) {\r\n                transition_to_select:\r\n                case SwitchToSelectOverlayNotification():\r\n                  await animationController.reverse(from: 1.0);\r\n                  overlayMode.value = OverlayMode.select;\r\n                  await animationController.forward();\r\n                case SwitchToAddOverlayNotification():\r\n                  await animationController.reverse(from: 1.0);\r\n                  overlayMode.value = OverlayMode.add;\r\n                  await animationController.forward();\r\n\r\n                case SelectedTagOverlayNotification(:Tag tag):\r\n                  await animationController.reverse();\r\n                  tagData.addTag(tag);\r\n                  dispose();\r\n                case CloseOverlayNotification():\r\n                  await animationController.reverse(from: 1.0);\r\n                  dispose();\r\n                case CreateNewTagOverlayNotification(:var name, :var color):\r\n                  var tag = CustomTag(name, color);\r\n                  tagData.addableTags.add(tag);\r\n\r\n                  continue transition_to_select;\r\n              }\r\n            }());\r\n\r\n            return true;\r\n          },\r\n          child: GestureDetector(\r\n            behavior: HitTestBehavior.translucent,\r\n            onTap: () async {\r\n              await animationController.reverse();\r\n              dispose();\r\n            },\r\n            child: Scaffold(\r\n              backgroundColor: const Color(0x7fCCAEBB),\r\n              body: BackdropFilter(\r\n                filter: ImageFilter.blur(sigmaX: 1.5, sigmaY: 1.5),\r\n                child: ValueListenableBuilder(\r\n                  valueListenable: overlayMode,\r\n                  builder: (context, overlayMode, child) => Center(\r\n                    child: AnimatedBuilder(\r\n                      animation: animationController,\r\n                      builder: (context, child) => Opacity(\r\n                        opacity: animationController.value,\r\n                        child: Transform.scale(\r\n                          scale: (0.8 + animationController.value).clamp(0.0, 1.0),\r\n                          alignment: Alignment.topCenter,\r\n                          child: ConstrainedBox(\r\n                            constraints: overlayConstraints,\r\n                            child: child,\r\n                          ),\r\n                        ),\r\n                      ),\r\n                      child: switch (overlayMode) {\r\n                        OverlayMode.select => SelectTagOverlay(tagData: tagData),\r\n                        OverlayMode.add => CreateTagOverlay(tagData: tagData),\r\n                      },\r\n                    ),\r\n                  ),\r\n                ),\r\n              ),\r\n            ),\r\n          ),\r\n        ),\r\n      );\r\n\r\n      init();\r\n    };\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return LayoutBuilder(\r\n      builder: (context, constraints) => ClipRRect(\r\n        borderRadius: BorderRadius.circular(16.0),\r\n        child: ClickableWidget(\r\n          onTap: tapHandler(context, constraints),\r\n          child: Container(\r\n            height: _tagHeight,\r\n            color: TagColors.selector,\r\n            child: const IgnorePointer(\r\n              child: Padding(\r\n                padding: EdgeInsets.symmetric(horizontal: 16.0),\r\n                child: Row(\r\n                  mainAxisSize: MainAxisSize.min,\r\n                  children: [\r\n                    Text(\"filter\", style: TextStyle(color: Colors.white)),\r\n                    SizedBox(width: _tagGapToIcon),\r\n                    Icon(Icons.add, size: _tagIconSize, color: Colors.white),\r\n                  ],\r\n                ),\r\n              ),\r\n            ),\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass SelectTagOverlay extends StatelessWidget {\r\n  const SelectTagOverlay({required this.tagData, super.key});\r\n\r\n  final TagData tagData;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    var theme = Theme.of(context);\r\n    var TagData(:activeTags, :addableTags) = tagData;\r\n    var availableTags = addableTags.difference(activeTags);\r\n\r\n    return GestureDetector(\r\n      behavior: HitTestBehavior.translucent,\r\n      onTap: () {},\r\n      child: Container(\r\n        padding: const EdgeInsets.all(16.0),\r\n        decoration: const BoxDecoration(\r\n          color: FigmaColors.whiteAccent,\r\n          borderRadius: BorderRadius.all(Radius.circular(5.0)),\r\n        ),\r\n        child: Column(\r\n          mainAxisSize: MainAxisSize.min,\r\n          children: [\r\n            Align(\r\n              alignment: Alignment.centerLeft,\r\n              child: Row(\r\n                children: [\r\n                  Padding(\r\n                    padding: const EdgeInsets.only(right: 16.0),\r\n                    child: ClickableWidget(\r\n                      onTap: () => const CloseOverlayNotification().dispatch(context),\r\n                      child: const Icon(Icons.close),\r\n                    ),\r\n                  ),\r\n                  Text(\r\n                    \"SELECT A TAG\",\r\n                    style: theme.textTheme.titleMedium?.copyWith(fontWeight: FontWeight.w800),\r\n                  ),\r\n                ],\r\n              ),\r\n            ),\r\n            const SizedBox(height: 8.0),\r\n            ConstrainedBox(\r\n              constraints: const BoxConstraints(maxHeight: 312),\r\n              child: switch (availableTags.length) {\r\n                0 => const SizedBox(),\r\n                _ => MouseSingleChildScrollView(\r\n                    child: Wrap(\r\n                      runSpacing: 8.0,\r\n                      children: [\r\n                        for (var tag in availableTags)\r\n                          Padding(\r\n                            padding: const EdgeInsets.only(right: 4.0),\r\n                            child: _TagWidget(\r\n                              tag: tag,\r\n                              icon: null,\r\n                              onTap: () => SelectedTagOverlayNotification(tag).dispatch(context),\r\n                            ),\r\n                          ),\r\n                      ],\r\n                    ),\r\n                  ),\r\n              },\r\n            ),\r\n            const SizedBox(height: 16.0),\r\n            _TagWidget(\r\n              tag: const CustomTag(\"Create a new tag\", TagColors.addButton),\r\n              icon: Icons.add,\r\n              onTap: () => const SwitchToAddOverlayNotification().dispatch(context),\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass CreateTagOverlay extends StatefulWidget {\r\n  const CreateTagOverlay({\r\n    required this.tagData,\r\n    super.key,\r\n  });\r\n\r\n  final TagData tagData;\r\n\r\n  @override\r\n  State<CreateTagOverlay> createState() => _CreateTagOverlayState();\r\n}\r\n\r\nclass _CreateTagOverlayState extends State<CreateTagOverlay> {\r\n  late final TextEditingController textEditingController;\r\n  late final ValueNotifier<UserSelectableColor?> selectedColor;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n\r\n    textEditingController = TextEditingController();\r\n    selectedColor = ValueNotifier(null);\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    textEditingController.dispose();\r\n    selectedColor.dispose();\r\n\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    var theme = Theme.of(context);\r\n\r\n    return GestureDetector(\r\n      behavior: HitTestBehavior.translucent,\r\n      onTap: () {},\r\n      child: Container(\r\n        padding: const EdgeInsets.all(16.0),\r\n        decoration: const BoxDecoration(\r\n          color: FigmaColors.whiteAccent,\r\n          borderRadius: BorderRadius.all(Radius.circular(5.0)),\r\n        ),\r\n        child: Column(\r\n          mainAxisSize: MainAxisSize.min,\r\n          children: [\r\n            Align(\r\n              alignment: Alignment.centerLeft,\r\n              child: Row(\r\n                children: [\r\n                  Padding(\r\n                    padding: const EdgeInsets.only(right: 16.0),\r\n                    child: ClickableWidget(\r\n                      onTap: () {\r\n                        const CloseOverlayNotification().dispatch(context);\r\n                      },\r\n                      child: const Icon(Icons.close),\r\n                    ),\r\n                  ),\r\n                  Expanded(\r\n                    child: TextField(\r\n                      controller: textEditingController,\r\n                      decoration: const InputDecoration(\r\n                        hintText: \"Tag name\",\r\n                        border: InputBorder.none,\r\n                        contentPadding: EdgeInsets.zero,\r\n                      ),\r\n                      style: theme.textTheme.titleMedium?.copyWith(fontWeight: FontWeight.w800),\r\n                    ),\r\n                  ),\r\n                ],\r\n              ),\r\n            ),\r\n            const SizedBox(height: 8.0),\r\n            ConstrainedBox(\r\n              constraints: const BoxConstraints(maxHeight: 312),\r\n              child: MouseScroll<ScrollController>(\r\n                builder: (context, controller, physics) {\r\n                  var colors = TagColors.selectable.iterable.toList();\r\n\r\n                  return GridView.builder(\r\n                    controller: controller,\r\n                    physics: physics,\r\n                    gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 5),\r\n                    itemCount: colors.length,\r\n                    itemBuilder: (context, index) => ClickableWidget(\r\n                      onTap: () {\r\n                        selectedColor.value = colors[index];\r\n                      },\r\n                      child: Padding(\r\n                        padding: const EdgeInsets.all(4.0),\r\n                        child: LayoutBuilder(\r\n                          builder: (context, constraints) => Center(\r\n                            child: Container(\r\n                              width: constraints.maxWidth,\r\n                              height: constraints.maxHeight,\r\n                              decoration: BoxDecoration(\r\n                                shape: BoxShape.circle,\r\n                                color: colors[index],\r\n                              ),\r\n                              child: ValueListenableBuilder(\r\n                                valueListenable: selectedColor,\r\n                                builder: (context, selectedColor, child) => selectedColor != colors[index]\r\n                                    ? const SizedBox()\r\n                                    : Center(\r\n                                        child: Container(\r\n                                          width: constraints.maxWidth * 0.9,\r\n                                          height: constraints.maxHeight * 0.9,\r\n                                          decoration: BoxDecoration(\r\n                                            shape: BoxShape.circle,\r\n                                            color: selectedColor == colors[index] //\r\n                                                ? FigmaColors.whiteAccent\r\n                                                : colors[index],\r\n                                          ),\r\n                                          child: Center(\r\n                                            child: Container(\r\n                                              width: constraints.maxWidth * 0.75,\r\n                                              height: constraints.maxHeight * 0.75,\r\n                                              decoration: BoxDecoration(\r\n                                                shape: BoxShape.circle,\r\n                                                color: colors[index],\r\n                                              ),\r\n                                            ),\r\n                                          ),\r\n                                        ),\r\n                                      ),\r\n                              ),\r\n                            ),\r\n                          ),\r\n                        ),\r\n                      ),\r\n                    ),\r\n                  );\r\n                },\r\n              ),\r\n            ),\r\n            const SizedBox(height: 16.0),\r\n            _TagWidget(\r\n              tag: const CustomTag(\"Add new tag\", TagColors.addButton),\r\n              icon: Icons.add,\r\n              onTap: () {\r\n                if (selectedColor.value case UserSelectableColor color) {\r\n                  if (textEditingController case TextEditingController(:var text) when text.isNotEmpty) {\r\n                    CreateNewTagOverlayNotification(color: color, name: text).dispatch(context);\r\n                  }\r\n                }\r\n              },\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\n/// Represents a simple removable tag.\r\nclass _TagWidget extends StatelessWidget {\r\n  const _TagWidget({required this.tag, this.icon = Icons.close, this.onTap});\r\n\r\n  final Tag tag;\r\n  final IconData? icon;\r\n  final void Function()? onTap;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ClipRRect(\r\n      borderRadius: BorderRadius.circular(16.0),\r\n      child: ClickableWidget(\r\n        onTap: onTap,\r\n        child: SizedBox(\r\n          height: _tagHeight,\r\n          child: Material(\r\n            color: tag.color,\r\n            child: Padding(\r\n              padding: const EdgeInsets.symmetric(horizontal: 16.0),\r\n              child: icon == null\r\n                  ? Row(\r\n                      mainAxisSize: MainAxisSize.min,\r\n                      children: [Text(tag.name, style: const TextStyle(color: Colors.white))],\r\n                    )\r\n                  : Row(\r\n                      mainAxisSize: MainAxisSize.min,\r\n                      children: [\r\n                        Text(tag.name, style: const TextStyle(color: Colors.white)),\r\n                        const SizedBox(width: _tagGapToIcon),\r\n                        Icon(icon, size: _tagIconSize, color: Colors.white),\r\n                      ],\r\n                    ),\r\n            ),\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}