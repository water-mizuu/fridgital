{
    "sourceFile": "lib/widgets/shared/miscellaneous/tags_view/widgets/shared/miscellaneous/modifiable_tag_form_overlay.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1700406834569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1700406869943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,16 +10,16 @@\n import \"package:fridgital/widgets/shared/miscellaneous/tags_view/widgets/shared/tag_widget.dart\";\r\n import \"package:mouse_scroll/mouse_scroll.dart\";\r\n import \"package:provider/provider.dart\";\r\n \r\n-class CreateTagOverlay extends StatefulWidget {\r\n-  const CreateTagOverlay({super.key});\r\n+base class ModifiableTagFormOverlay extends StatefulWidget {\r\n+  const ModifiableTagFormOverlay({super.key,});\r\n \r\n   @override\r\n-  State<CreateTagOverlay> createState() => _CreateTagOverlayState();\r\n+  State<ModifiableTagFormOverlay> createState() => _ModifiableTagFormOverlayState();\r\n }\r\n \r\n-class _CreateTagOverlayState extends State<CreateTagOverlay> {\r\n+class _ModifiableTagFormOverlayState extends State<ModifiableTagFormOverlay> {\r\n   late final FocusNode focusNode;\r\n   late final TextEditingController textEditingController;\r\n   late final ValueNotifier<UserSelectableColor?> selectedColor;\r\n \r\n"
                },
                {
                    "date": 1700406900012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,10 +11,15 @@\n import \"package:mouse_scroll/mouse_scroll.dart\";\r\n import \"package:provider/provider.dart\";\r\n \r\n base class ModifiableTagFormOverlay extends StatefulWidget {\r\n-  const ModifiableTagFormOverlay({super.key,});\r\n+  const ModifiableTagFormOverlay({\r\n+    super.key,\r\n+  });\r\n \r\n+  final void Function() onCancel;\r\n+  final void Function(Tag tag) onSubmit;\r\n+\r\n   @override\r\n   State<ModifiableTagFormOverlay> createState() => _ModifiableTagFormOverlayState();\r\n }\r\n \r\n"
                },
                {
                    "date": 1700406931466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,11 +12,15 @@\n import \"package:provider/provider.dart\";\r\n \r\n base class ModifiableTagFormOverlay extends StatefulWidget {\r\n   const ModifiableTagFormOverlay({\r\n+    \r\n+    required this.onCancel,\r\n+    required this.onSubmit,\r\n     super.key,\r\n   });\r\n \r\n+  final String initialText;\r\n   final void Function() onCancel;\r\n   final void Function(Tag tag) onSubmit;\r\n \r\n   @override\r\n"
                },
                {
                    "date": 1700406962790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,15 +12,17 @@\n import \"package:provider/provider.dart\";\r\n \r\n base class ModifiableTagFormOverlay extends StatefulWidget {\r\n   const ModifiableTagFormOverlay({\r\n-    \r\n+    required this.initialText,\r\n+    required this.initialColor,\r\n     required this.onCancel,\r\n     required this.onSubmit,\r\n     super.key,\r\n   });\r\n \r\n-  final String initialText;\r\n+  final String? initialText;\r\n+  final UserSelectableColor? i;\r\n   final void Function() onCancel;\r\n   final void Function(Tag tag) onSubmit;\r\n \r\n   @override\r\n@@ -36,9 +38,9 @@\n   void initState() {\r\n     super.initState();\r\n \r\n     focusNode = FocusNode();\r\n-    textEditingController = TextEditingController();\r\n+    textEditingController = TextEditingController(text: widget.initialText);\r\n     selectedColor = ValueNotifier(null);\r\n \r\n     WidgetsBinding.instance.addPostFrameCallback((_) {\r\n       focusNode.requestFocus();\r\n"
                },
                {
                    "date": 1700407004845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,221 @@\n+import \"package:flutter/material.dart\";\r\n+import \"package:fridgital/back_end/tag_data.dart\";\r\n+import \"package:fridgital/shared/classes/selected_color.dart\";\r\n+import \"package:fridgital/shared/constants.dart\";\r\n+import \"package:fridgital/shared/extensions/time.dart\";\r\n+import \"package:fridgital/widgets/shared/miscellaneous/clickable_widget.dart\";\r\n+import \"package:fridgital/widgets/shared/miscellaneous/tags_view/shared/enums/overlay_mode.dart\";\r\n+import \"package:fridgital/widgets/shared/miscellaneous/tags_view/shared/notifications.dart\";\r\n+import \"package:fridgital/widgets/shared/miscellaneous/tags_view/widgets/shared/icon_widget.dart\";\r\n+import \"package:fridgital/widgets/shared/miscellaneous/tags_view/widgets/shared/tag_widget.dart\";\r\n+import \"package:mouse_scroll/mouse_scroll.dart\";\r\n+import \"package:provider/provider.dart\";\r\n+\r\n+base class ModifiableTagFormOverlay extends StatefulWidget {\r\n+  const ModifiableTagFormOverlay({\r\n+    required this.initialText,\r\n+    required this.initialColor,\r\n+    required this.onCancel,\r\n+    required this.onSubmit,\r\n+    super.key,\r\n+  });\r\n+\r\n+  final String? initialText;\r\n+  final UserSelectableColor? initialColor;\r\n+  final void Function() onCancel;\r\n+  final void Function(Tag tag) onSubmit;\r\n+\r\n+  @override\r\n+  State<ModifiableTagFormOverlay> createState() => _ModifiableTagFormOverlayState();\r\n+}\r\n+\r\n+class _ModifiableTagFormOverlayState extends State<ModifiableTagFormOverlay> {\r\n+  late final FocusNode focusNode;\r\n+  late final TextEditingController textEditingController;\r\n+  late final ValueNotifier<UserSelectableColor?> selectedColor;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+\r\n+    focusNode = FocusNode();\r\n+    textEditingController = TextEditingController(text: widget.initialText);\r\n+    selectedColor = ValueNotifier(widget.initialColor);\r\n+\r\n+    WidgetsBinding.instance.addPostFrameCallback((_) {\r\n+      focusNode.requestFocus();\r\n+    });\r\n+  }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    focusNode.dispose();\r\n+    textEditingController.dispose();\r\n+    selectedColor.dispose();\r\n+\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    var theme = Theme.of(context);\r\n+\r\n+    return GestureDetector(\r\n+      behavior: HitTestBehavior.translucent,\r\n+      onTap: () {},\r\n+      child: Container(\r\n+        padding: const EdgeInsets.all(16.0),\r\n+        decoration: const BoxDecoration(\r\n+          color: FigmaColors.whiteAccent,\r\n+          borderRadius: BorderRadius.all(Radius.circular(5.0)),\r\n+        ),\r\n+        child: Column(\r\n+          mainAxisSize: MainAxisSize.min,\r\n+          children: [\r\n+            Align(\r\n+              alignment: Alignment.centerLeft,\r\n+              child: Row(\r\n+                children: [\r\n+                  Padding(\r\n+                    padding: const EdgeInsets.only(right: 16.0),\r\n+                    child: ClickableWidget(\r\n+                      onTap: () {\r\n+                        \r\n+                        const CloseOverlayNotification().dispatch(context);\r\n+                      },\r\n+                      child: const Icon(Icons.close),\r\n+                    ),\r\n+                  ),\r\n+                  Expanded(\r\n+                    child: TextField(\r\n+                      focusNode: focusNode,\r\n+                      autofocus: true,\r\n+                      controller: textEditingController,\r\n+                      decoration: const InputDecoration(\r\n+                        hintText: \"Tag name\",\r\n+                        border: InputBorder.none,\r\n+                        contentPadding: EdgeInsets.zero,\r\n+                      ),\r\n+                      style: theme.textTheme.titleMedium?.copyWith(fontWeight: FontWeight.w800),\r\n+                    ),\r\n+                  ),\r\n+                ],\r\n+              ),\r\n+            ),\r\n+            const SizedBox(height: 8.0),\r\n+            ConstrainedBox(\r\n+              constraints: const BoxConstraints(maxHeight: 312),\r\n+              child: MouseScroll<ScrollController>(\r\n+                builder: (context, controller, physics) => GridView.builder(\r\n+                  controller: controller,\r\n+                  physics: physics,\r\n+                  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 5),\r\n+                  itemCount: TagColors.selectable.length,\r\n+                  itemBuilder: (context, index) {\r\n+                    var color = TagColors.selectable[index];\r\n+\r\n+                    return ClickableWidget(\r\n+                      onTap: () {\r\n+                        selectedColor.value = color;\r\n+                      },\r\n+                      child: Padding(\r\n+                        padding: const EdgeInsets.all(4.0),\r\n+                        child: LayoutBuilder(\r\n+                          builder: (context, constraints) => Center(\r\n+                            child: Container(\r\n+                              width: constraints.maxWidth * 0.9,\r\n+                              height: constraints.maxHeight * 0.9,\r\n+                              decoration: BoxDecoration(\r\n+                                shape: BoxShape.circle,\r\n+                                color: color,\r\n+                              ),\r\n+                              child: ValueListenableBuilder(\r\n+                                valueListenable: selectedColor,\r\n+                                builder: (context, selectedColor, child) => //\r\n+                                    selectedColor != color\r\n+                                        ? const SizedBox()\r\n+                                        : Center(\r\n+                                            child: Container(\r\n+                                              width: constraints.maxWidth * 0.8375,\r\n+                                              height: constraints.maxHeight * 0.8375,\r\n+                                              decoration: BoxDecoration(\r\n+                                                shape: BoxShape.circle,\r\n+                                                color: selectedColor == color //\r\n+                                                    ? FigmaColors.whiteAccent\r\n+                                                    : color,\r\n+                                              ),\r\n+                                              child: Center(\r\n+                                                child: Container(\r\n+                                                  width: constraints.maxWidth * 0.7,\r\n+                                                  height: constraints.maxHeight * 0.7,\r\n+                                                  decoration: BoxDecoration(\r\n+                                                    shape: BoxShape.circle,\r\n+                                                    color: color,\r\n+                                                  ),\r\n+                                                ),\r\n+                                              ),\r\n+                                            ),\r\n+                                          ),\r\n+                              ),\r\n+                            ),\r\n+                          ),\r\n+                        ),\r\n+                      ),\r\n+                    );\r\n+                  },\r\n+                ),\r\n+              ),\r\n+            ),\r\n+            const SizedBox(height: 16.0),\r\n+            Row(\r\n+              mainAxisAlignment: MainAxisAlignment.center,\r\n+              children: [\r\n+                IconWidget(\r\n+                  icon: Icons.arrow_back,\r\n+                  color: TagColors.addButton,\r\n+                  onTap: () {\r\n+                    const SwitchOverlayNotification(mode: OverlayMode.select).dispatch(context);\r\n+                  },\r\n+                ),\r\n+                const SizedBox(height: 8.0, width: 8.0),\r\n+                TagWidget(\r\n+                  tag: const CustomTag(\"Add\", TagColors.addButton),\r\n+                  icon: Icons.add,\r\n+                  onTap: () {\r\n+                    var color = selectedColor.value;\r\n+                    if (color == null) {\r\n+                      var snackbar = SnackBar(content: const Text(\"Please select a color\"), duration: 2.s);\r\n+\r\n+                      ScaffoldMessenger.of(context).showSnackBar(snackbar);\r\n+                      return;\r\n+                    }\r\n+\r\n+                    var text = textEditingController.text;\r\n+                    if (text.isEmpty) {\r\n+                      var snackbar = SnackBar(content: const Text(\"Please enter a name\"), duration: 2.s);\r\n+\r\n+                      ScaffoldMessenger.of(context).showSnackBar(snackbar);\r\n+                      return;\r\n+                    }\r\n+\r\n+                    if (context.read<TagData>().addableTags.any((v) => v.name == text)) {\r\n+                      var snackbar = SnackBar(\r\n+                        content: Text(\"A tag with the name '$text' already exists!\"),\r\n+                        duration: 2.s,\r\n+                      );\r\n+\r\n+                      ScaffoldMessenger.of(context).showSnackBar(snackbar);\r\n+                      return;\r\n+                    }\r\n+\r\n+                    CreateNewTagOverlayNotification(color: color, name: text).dispatch(context);\r\n+                  },\r\n+                ),\r\n+              ],\r\n+            ),\r\n+          ],\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                }
            ],
            "date": 1700406834569,
            "name": "Commit-0",
            "content": "import \"package:flutter/material.dart\";\r\nimport \"package:fridgital/back_end/tag_data.dart\";\r\nimport \"package:fridgital/shared/classes/selected_color.dart\";\r\nimport \"package:fridgital/shared/constants.dart\";\r\nimport \"package:fridgital/shared/extensions/time.dart\";\r\nimport \"package:fridgital/widgets/shared/miscellaneous/clickable_widget.dart\";\r\nimport \"package:fridgital/widgets/shared/miscellaneous/tags_view/shared/enums/overlay_mode.dart\";\r\nimport \"package:fridgital/widgets/shared/miscellaneous/tags_view/shared/notifications.dart\";\r\nimport \"package:fridgital/widgets/shared/miscellaneous/tags_view/widgets/shared/icon_widget.dart\";\r\nimport \"package:fridgital/widgets/shared/miscellaneous/tags_view/widgets/shared/tag_widget.dart\";\r\nimport \"package:mouse_scroll/mouse_scroll.dart\";\r\nimport \"package:provider/provider.dart\";\r\n\r\nclass CreateTagOverlay extends StatefulWidget {\r\n  const CreateTagOverlay({super.key});\r\n\r\n  @override\r\n  State<CreateTagOverlay> createState() => _CreateTagOverlayState();\r\n}\r\n\r\nclass _CreateTagOverlayState extends State<CreateTagOverlay> {\r\n  late final FocusNode focusNode;\r\n  late final TextEditingController textEditingController;\r\n  late final ValueNotifier<UserSelectableColor?> selectedColor;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n\r\n    focusNode = FocusNode();\r\n    textEditingController = TextEditingController();\r\n    selectedColor = ValueNotifier(null);\r\n\r\n    WidgetsBinding.instance.addPostFrameCallback((_) {\r\n      focusNode.requestFocus();\r\n    });\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    focusNode.dispose();\r\n    textEditingController.dispose();\r\n    selectedColor.dispose();\r\n\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    var theme = Theme.of(context);\r\n\r\n    return GestureDetector(\r\n      behavior: HitTestBehavior.translucent,\r\n      onTap: () {},\r\n      child: Container(\r\n        padding: const EdgeInsets.all(16.0),\r\n        decoration: const BoxDecoration(\r\n          color: FigmaColors.whiteAccent,\r\n          borderRadius: BorderRadius.all(Radius.circular(5.0)),\r\n        ),\r\n        child: Column(\r\n          mainAxisSize: MainAxisSize.min,\r\n          children: [\r\n            Align(\r\n              alignment: Alignment.centerLeft,\r\n              child: Row(\r\n                children: [\r\n                  Padding(\r\n                    padding: const EdgeInsets.only(right: 16.0),\r\n                    child: ClickableWidget(\r\n                      onTap: () {\r\n                        const CloseOverlayNotification().dispatch(context);\r\n                      },\r\n                      child: const Icon(Icons.close),\r\n                    ),\r\n                  ),\r\n                  Expanded(\r\n                    child: TextField(\r\n                      focusNode: focusNode,\r\n                      autofocus: true,\r\n                      controller: textEditingController,\r\n                      decoration: const InputDecoration(\r\n                        hintText: \"Tag name\",\r\n                        border: InputBorder.none,\r\n                        contentPadding: EdgeInsets.zero,\r\n                      ),\r\n                      style: theme.textTheme.titleMedium?.copyWith(fontWeight: FontWeight.w800),\r\n                    ),\r\n                  ),\r\n                ],\r\n              ),\r\n            ),\r\n            const SizedBox(height: 8.0),\r\n            ConstrainedBox(\r\n              constraints: const BoxConstraints(maxHeight: 312),\r\n              child: MouseScroll<ScrollController>(\r\n                builder: (context, controller, physics) => GridView.builder(\r\n                  controller: controller,\r\n                  physics: physics,\r\n                  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 5),\r\n                  itemCount: TagColors.selectable.length,\r\n                  itemBuilder: (context, index) {\r\n                    var color = TagColors.selectable[index];\r\n\r\n                    return ClickableWidget(\r\n                      onTap: () {\r\n                        selectedColor.value = color;\r\n                      },\r\n                      child: Padding(\r\n                        padding: const EdgeInsets.all(4.0),\r\n                        child: LayoutBuilder(\r\n                          builder: (context, constraints) => Center(\r\n                            child: Container(\r\n                              width: constraints.maxWidth * 0.9,\r\n                              height: constraints.maxHeight * 0.9,\r\n                              decoration: BoxDecoration(\r\n                                shape: BoxShape.circle,\r\n                                color: color,\r\n                              ),\r\n                              child: ValueListenableBuilder(\r\n                                valueListenable: selectedColor,\r\n                                builder: (context, selectedColor, child) => //\r\n                                    selectedColor != color\r\n                                        ? const SizedBox()\r\n                                        : Center(\r\n                                            child: Container(\r\n                                              width: constraints.maxWidth * 0.8375,\r\n                                              height: constraints.maxHeight * 0.8375,\r\n                                              decoration: BoxDecoration(\r\n                                                shape: BoxShape.circle,\r\n                                                color: selectedColor == color //\r\n                                                    ? FigmaColors.whiteAccent\r\n                                                    : color,\r\n                                              ),\r\n                                              child: Center(\r\n                                                child: Container(\r\n                                                  width: constraints.maxWidth * 0.7,\r\n                                                  height: constraints.maxHeight * 0.7,\r\n                                                  decoration: BoxDecoration(\r\n                                                    shape: BoxShape.circle,\r\n                                                    color: color,\r\n                                                  ),\r\n                                                ),\r\n                                              ),\r\n                                            ),\r\n                                          ),\r\n                              ),\r\n                            ),\r\n                          ),\r\n                        ),\r\n                      ),\r\n                    );\r\n                  },\r\n                ),\r\n              ),\r\n            ),\r\n            const SizedBox(height: 16.0),\r\n            Row(\r\n              mainAxisAlignment: MainAxisAlignment.center,\r\n              children: [\r\n                IconWidget(\r\n                  icon: Icons.arrow_back,\r\n                  color: TagColors.addButton,\r\n                  onTap: () {\r\n                    const SwitchOverlayNotification(mode: OverlayMode.select).dispatch(context);\r\n                  },\r\n                ),\r\n                const SizedBox(height: 8.0, width: 8.0),\r\n                TagWidget(\r\n                  tag: const CustomTag(\"Add\", TagColors.addButton),\r\n                  icon: Icons.add,\r\n                  onTap: () {\r\n                    var color = selectedColor.value;\r\n                    if (color == null) {\r\n                      var snackbar = SnackBar(content: const Text(\"Please select a color\"), duration: 2.s);\r\n\r\n                      ScaffoldMessenger.of(context).showSnackBar(snackbar);\r\n                      return;\r\n                    }\r\n\r\n                    var text = textEditingController.text;\r\n                    if (text.isEmpty) {\r\n                      var snackbar = SnackBar(content: const Text(\"Please enter a name\"), duration: 2.s);\r\n\r\n                      ScaffoldMessenger.of(context).showSnackBar(snackbar);\r\n                      return;\r\n                    }\r\n\r\n                    if (context.read<TagData>().addableTags.any((v) => v.name == text)) {\r\n                      var snackbar = SnackBar(\r\n                        content: Text(\"A tag with the name '$text' already exists!\"),\r\n                        duration: 2.s,\r\n                      );\r\n\r\n                      ScaffoldMessenger.of(context).showSnackBar(snackbar);\r\n                      return;\r\n                    }\r\n\r\n                    CreateNewTagOverlayNotification(color: color, name: text).dispatch(context);\r\n                  },\r\n                ),\r\n              ],\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}