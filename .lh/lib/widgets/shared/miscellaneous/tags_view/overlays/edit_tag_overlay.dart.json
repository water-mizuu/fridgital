{
    "sourceFile": "lib/widgets/shared/miscellaneous/tags_view/overlays/edit_tag_overlay.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1700406181692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1700406225577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,11 +4,11 @@\n import \"package:fridgital/back_end/tag_data.dart\";\r\n import \"package:fridgital/shared/classes/selected_color.dart\";\r\n import \"package:fridgital/shared/constants.dart\";\r\n import \"package:fridgital/shared/extensions/time.dart\";\r\n-import \"package:fridgital/widgets/shared/miscellaneous/clickable_widget.dart\";\r\n-import \"package:fridgital/widgets/shared/miscellaneous/tags_view/notifications.dart\";\r\n-import \"package:fridgital/widgets/shared/miscellaneous/tags_view/tags_view.dart\";\r\n+import \"package:fridgital/widgets/shared/miscellaneous/widgets/clickable_widget.dart\";\r\n+import \"package:fridgital/widgets/shared/miscellaneous/widgets/tags_view/notifications.dart\";\r\n+import \"package:fridgital/widgets/shared/miscellaneous/widgets/tags_view/tags_view.dart\";\r\n import \"package:mouse_scroll/mouse_scroll.dart\";\r\n import \"package:provider/provider.dart\";\r\n \r\n class EditTagOverlay extends StatefulWidget {\r\n"
                },
                {
                    "date": 1700406260618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,11 +4,11 @@\n import \"package:fridgital/back_end/tag_data.dart\";\r\n import \"package:fridgital/shared/classes/selected_color.dart\";\r\n import \"package:fridgital/shared/constants.dart\";\r\n import \"package:fridgital/shared/extensions/time.dart\";\r\n-import \"package:fridgital/widgets/shared/miscellaneous/widgets/clickable_widget.dart\";\r\n-import \"package:fridgital/widgets/shared/miscellaneous/widgets/tags_view/notifications.dart\";\r\n-import \"package:fridgital/widgets/shared/miscellaneous/widgets/tags_view/tags_view.dart\";\r\n+import \"package:fridgital/widgets/shared/miscellaneous/clickable_widget.dart\";\r\n+import \"package:fridgital/widgets/shared/miscellaneous/tags_view/notifications.dart\";\r\n+import \"package:fridgital/widgets/shared/miscellaneous/tags_view/tags_view.dart\";\r\n import \"package:mouse_scroll/mouse_scroll.dart\";\r\n import \"package:provider/provider.dart\";\r\n \r\n class EditTagOverlay extends StatefulWidget {\r\n"
                },
                {
                    "date": 1700406284592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import \"package:fridgital/shared/constants.dart\";\r\n import \"package:fridgital/shared/extensions/time.dart\";\r\n import \"package:fridgital/widgets/shared/miscellaneous/clickable_widget.dart\";\r\n import \"package:fridgital/widgets/shared/miscellaneous/tags_view/notifications.dart\";\r\n-import \"package:fridgital/widgets/shared/miscellaneous/tags_view/tags_view.dart\";\r\n+import \"package:fridgital/widgets/shared/miscellaneous/tags_view/widgets/tags_view.dart\";\r\n import \"package:mouse_scroll/mouse_scroll.dart\";\r\n import \"package:provider/provider.dart\";\r\n \r\n class EditTagOverlay extends StatefulWidget {\r\n"
                }
            ],
            "date": 1700406181692,
            "name": "Commit-0",
            "content": "// TODO(water-mizuu): Refactor this whole file.\r\n\r\nimport \"package:flutter/material.dart\";\r\nimport \"package:fridgital/back_end/tag_data.dart\";\r\nimport \"package:fridgital/shared/classes/selected_color.dart\";\r\nimport \"package:fridgital/shared/constants.dart\";\r\nimport \"package:fridgital/shared/extensions/time.dart\";\r\nimport \"package:fridgital/widgets/shared/miscellaneous/clickable_widget.dart\";\r\nimport \"package:fridgital/widgets/shared/miscellaneous/tags_view/notifications.dart\";\r\nimport \"package:fridgital/widgets/shared/miscellaneous/tags_view/tags_view.dart\";\r\nimport \"package:mouse_scroll/mouse_scroll.dart\";\r\nimport \"package:provider/provider.dart\";\r\n\r\nclass EditTagOverlay extends StatefulWidget {\r\n  const EditTagOverlay({required this.tag, super.key});\r\n\r\n  /// This is the tag that we want to be editing.\r\n  final CustomTag tag;\r\n\r\n  @override\r\n  State<EditTagOverlay> createState() => _EditTagOverlayState();\r\n}\r\n\r\nclass _EditTagOverlayState extends State<EditTagOverlay> {\r\n  late final FocusNode focusNode;\r\n  late final TextEditingController textEditingController;\r\n  late final ValueNotifier<UserSelectableColor> selectedColor;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n\r\n    focusNode = FocusNode();\r\n    textEditingController = TextEditingController(text: widget.tag.name);\r\n    selectedColor = ValueNotifier(widget.tag.color);\r\n\r\n    WidgetsBinding.instance.addPostFrameCallback((_) {\r\n      focusNode.requestFocus();\r\n    });\r\n  }\r\n\r\n  @override\r\n  void didUpdateWidget(covariant EditTagOverlay oldWidget) {\r\n    super.didUpdateWidget(oldWidget);\r\n\r\n    if (oldWidget.tag != widget.tag) {\r\n      textEditingController.text = widget.tag.name;\r\n      selectedColor.value = widget.tag.color;\r\n    }\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    focusNode.dispose();\r\n    textEditingController.dispose();\r\n    selectedColor.dispose();\r\n\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    var theme = Theme.of(context);\r\n\r\n    return GestureDetector(\r\n      behavior: HitTestBehavior.translucent,\r\n      onTap: () => (),\r\n      child: Container(\r\n        padding: const EdgeInsets.all(16.0),\r\n        decoration: const BoxDecoration(\r\n          color: FigmaColors.whiteAccent,\r\n          borderRadius: BorderRadius.all(Radius.circular(5.0)),\r\n        ),\r\n        child: Column(\r\n          mainAxisSize: MainAxisSize.min,\r\n          children: [\r\n            Align(\r\n              alignment: Alignment.centerLeft,\r\n              child: Row(\r\n                children: [\r\n                  Padding(\r\n                    padding: const EdgeInsets.only(right: 16.0),\r\n                    child: ClickableWidget(\r\n                      onTap: () {\r\n                        const CloseOverlayNotification().dispatch(context);\r\n                      },\r\n                      child: const Icon(Icons.close),\r\n                    ),\r\n                  ),\r\n                  Expanded(\r\n                    child: TextField(\r\n                      autofocus: true,\r\n                      controller: textEditingController,\r\n                      decoration: const InputDecoration(\r\n                        hintText: \"Tag name\",\r\n                        border: InputBorder.none,\r\n                        contentPadding: EdgeInsets.zero,\r\n                      ),\r\n                      focusNode: focusNode,\r\n                      style: theme.textTheme.titleMedium?.copyWith(fontWeight: FontWeight.w800),\r\n                    ),\r\n                  ),\r\n                ],\r\n              ),\r\n            ),\r\n            const SizedBox(height: 8.0),\r\n            ConstrainedBox(\r\n              constraints: const BoxConstraints(maxHeight: 312),\r\n              child: MouseScroll<ScrollController>(\r\n                builder: (context, controller, physics) => ValueListenableBuilder(\r\n                  valueListenable: selectedColor,\r\n                  builder: (context, selectedColor, _) {\r\n                    return GridView.builder(\r\n                      controller: controller,\r\n                      physics: physics,\r\n                      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 5),\r\n                      itemCount: TagColors.selectable.length,\r\n                      itemBuilder: (context, index) {\r\n                        var color = TagColors.selectable[index];\r\n\r\n                        return ClickableWidget(\r\n                          onTap: () {\r\n                            this.selectedColor.value = color;\r\n                          },\r\n                          child: Padding(\r\n                            padding: const EdgeInsets.all(4.0),\r\n                            child: LayoutBuilder(\r\n                              builder: (context, constraints) => Center(\r\n                                child: Container(\r\n                                  width: constraints.maxWidth * 0.9,\r\n                                  height: constraints.maxHeight * 0.9,\r\n                                  decoration: BoxDecoration(\r\n                                    shape: BoxShape.circle,\r\n                                    color: color,\r\n                                  ),\r\n                                  child: selectedColor != color\r\n                                      ? const SizedBox()\r\n                                      : Center(\r\n                                          child: Container(\r\n                                            width: constraints.maxWidth * 0.8375,\r\n                                            height: constraints.maxHeight * 0.8375,\r\n                                            decoration: const BoxDecoration(\r\n                                              shape: BoxShape.circle,\r\n                                              color: FigmaColors.whiteAccent,\r\n                                            ),\r\n                                            child: Center(\r\n                                              child: Container(\r\n                                                width: constraints.maxWidth * 0.7,\r\n                                                height: constraints.maxHeight * 0.7,\r\n                                                decoration: BoxDecoration(\r\n                                                  shape: BoxShape.circle,\r\n                                                  color: color,\r\n                                                ),\r\n                                              ),\r\n                                            ),\r\n                                          ),\r\n                                        ),\r\n                                ),\r\n                              ),\r\n                            ),\r\n                          ),\r\n                        );\r\n                      },\r\n                    );\r\n                  },\r\n                ),\r\n              ),\r\n            ),\r\n            const SizedBox(height: 16.0),\r\n            Row(\r\n              mainAxisAlignment: MainAxisAlignment.center,\r\n              children: [\r\n                IconWidget(\r\n                  icon: Icons.arrow_back,\r\n                  color: TagColors.addButton,\r\n                  onTap: () {\r\n                    const SwitchOverlayNotification(mode: OverlayMode.selectEdit).dispatch(context);\r\n                  },\r\n                ),\r\n                const SizedBox(height: 8.0, width: 8.0),\r\n                TagWidget(\r\n                  tag: const CustomTag(\"Confirm\", TagColors.addButton),\r\n                  icon: Icons.check,\r\n                  onTap: () {\r\n                    var color = selectedColor.value;\r\n                    var text = textEditingController.text;\r\n                    if (text.isEmpty) {\r\n                      var snackbar = SnackBar(\r\n                        content: const Text(\"Please enter a name\"),\r\n                        duration: 2.s,\r\n                      );\r\n\r\n                      ScaffoldMessenger.of(context).showSnackBar(snackbar);\r\n                      return;\r\n                    }\r\n                    if (context.read<TagData>().addableTags.any((v) => v != widget.tag && v.name == text)) {\r\n                      var snackbar = SnackBar(\r\n                        content: Text(\"A tag with the name '$text' already exists!\"),\r\n                        duration: 2.s,\r\n                      );\r\n\r\n                      ScaffoldMessenger.of(context).showSnackBar(snackbar);\r\n                      return;\r\n                    }\r\n\r\n                    ModifyWorkingTagNotification(color: color, name: text).dispatch(context);\r\n                  },\r\n                ),\r\n              ],\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}