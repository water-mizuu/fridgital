{
    "sourceFile": "lib/shared/extensions/color_conversion.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 18,
            "patches": [
                {
                    "date": 1700402680808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1700402721028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,6 @@\n-e\n\\ No newline at end of file\n+import \"package:flutter/material.dart\";\r\n+\r\n+extension ColorConversionExtension on Color {\r\n+  (int r, int g, int b) get rgb => (red, green, blue);\r\n+  (int h, d s, d l) get hsl => (hue, saturation, lightness);\r\n+}\r\n"
                },
                {
                    "date": 1700402751202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,12 @@\n import \"package:flutter/material.dart\";\r\n \r\n extension ColorConversionExtension on Color {\r\n   (int r, int g, int b) get rgb => (red, green, blue);\r\n-  (int h, d s, d l) get hsl => (hue, saturation, lightness);\r\n+  (int h, double s, double l) get hsl {\r\n+    var r = red / 255;\r\n+    var g = green / 255;\r\n+    var b = blue / 255;\r\n+\r\n+    var m\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1700402781278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+import \"dart:math\";\r\n+\r\n import \"package:flutter/material.dart\";\r\n \r\n extension ColorConversionExtension on Color {\r\n   (int r, int g, int b) get rgb => (red, green, blue);\r\n@@ -6,7 +8,12 @@\n     var r = red / 255;\r\n     var g = green / 255;\r\n     var b = blue / 255;\r\n \r\n-    var m\r\n+    var colorMin = [r, g, b].reduce(min);\r\n+    var colorMax = [r, g, b].reduce(max);\r\n+    var delta = colorMax - colorMin;\r\n+    var h = 0;\r\n+    var s = 0.0;\r\n+    va\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1700402816720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,20 @@\n \r\n     var colorMin = [r, g, b].reduce(min);\r\n     var colorMax = [r, g, b].reduce(max);\r\n     var delta = colorMax - colorMin;\r\n-    var h = 0;\r\n+    var h = 0.;\r\n     var s = 0.0;\r\n-    va\r\n+    var l = 0.0;\r\n+\r\n+    /// Compute the hue.\r\n+    if (delta == 0) {\r\n+      h = 0;\r\n+    } else if (colorMax == r) {\r\n+      h = 60 * (((g - b) / delta) % 6);\r\n+    } else if (colorMax == g) {\r\n+      h = 60 * (((b - r) / delta) + 2);\r\n+    } else if (colorMax == b) {\r\n+      h = 60 * (((r - g) / delta) + 4);\r\n+    }\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1700402846767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \r\n     var colorMin = [r, g, b].reduce(min);\r\n     var colorMax = [r, g, b].reduce(max);\r\n     var delta = colorMax - colorMin;\r\n-    var h = 0.;\r\n+    var h = 0.0;\r\n     var s = 0.0;\r\n     var l = 0.0;\r\n \r\n     /// Compute the hue.\r\n@@ -25,6 +25,9 @@\n       h = 60 * (((b - r) / delta) + 2);\r\n     } else if (colorMax == b) {\r\n       h = 60 * (((r - g) / delta) + 4);\r\n     }\r\n+    h %= 360;\r\n+\r\n+    l = (c)\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1700402882770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,35 @@\n+import \"dart:math\";\r\n+\r\n+import \"package:flutter/material.dart\";\r\n+\r\n+extension ColorConversionExtension on Color {\r\n+  (int r, int g, int b) get rgb => (red, green, blue);\r\n+  (int h, double s, double l) get hsl {\r\n+    var r = red / 255;\r\n+    var g = green / 255;\r\n+    var b = blue / 255;\r\n+\r\n+    var colorMin = [r, g, b].reduce(min);\r\n+    var colorMax = [r, g, b].reduce(max);\r\n+    var delta = colorMax - colorMin;\r\n+    var h = 0.0;\r\n+    var s = 0.0;\r\n+    var l = 0.0;\r\n+\r\n+    /// Compute the hue.\r\n+    if (delta == 0) {\r\n+      h = 0;\r\n+    } else if (colorMax == r) {\r\n+      h = 60 * (((g - b) / delta) % 6);\r\n+    } else if (colorMax == g) {\r\n+      h = 60 * (((b - r) / delta) + 2);\r\n+    } else if (colorMax == b) {\r\n+      h = 60 * (((r - g) / delta) + 4);\r\n+    }\r\n+    h %= 360;\r\n+\r\n+    l = (colorMax + colorMin) / 2;\r\n+    s = delta == 0 ? 0 : delta / (1 - (2 * l - 1).abs());\r\n+    \r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1700402912804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,13 @@\n import \"dart:math\";\r\n \r\n import \"package:flutter/material.dart\";\r\n \r\n+typedef Hsl\r\n+\r\n extension ColorConversionExtension on Color {\r\n   (int r, int g, int b) get rgb => (red, green, blue);\r\n+\r\n   (int h, double s, double l) get hsl {\r\n     var r = red / 255;\r\n     var g = green / 255;\r\n     var b = blue / 255;\r\n@@ -29,40 +32,8 @@\n     h %= 360;\r\n \r\n     l = (colorMax + colorMin) / 2;\r\n     s = delta == 0 ? 0 : delta / (1 - (2 * l - 1).abs());\r\n-    \r\n-  }\r\n-}\r\n-import \"dart:math\";\r\n \r\n-import \"package:flutter/material.dart\";\r\n-\r\n-extension ColorConversionExtension on Color {\r\n-  (int r, int g, int b) get rgb => (red, green, blue);\r\n-  (int h, double s, double l) get hsl {\r\n-    var r = red / 255;\r\n-    var g = green / 255;\r\n-    var b = blue / 255;\r\n-\r\n-    var colorMin = [r, g, b].reduce(min);\r\n-    var colorMax = [r, g, b].reduce(max);\r\n-    var delta = colorMax - colorMin;\r\n-    var h = 0.0;\r\n-    var s = 0.0;\r\n-    var l = 0.0;\r\n-\r\n-    /// Compute the hue.\r\n-    if (delta == 0) {\r\n-      h = 0;\r\n-    } else if (colorMax == r) {\r\n-      h = 60 * (((g - b) / delta) % 6);\r\n-    } else if (colorMax == g) {\r\n-      h = 60 * (((b - r) / delta) + 2);\r\n-    } else if (colorMax == b) {\r\n-      h = 60 * (((r - g) / delta) + 4);\r\n-    }\r\n-    h %= 360;\r\n-\r\n-    l = (c)\r\n+    return (h.round(), s, l);\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1700402946933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,15 @@\n import \"dart:math\";\r\n \r\n import \"package:flutter/material.dart\";\r\n \r\n-typedef Hsl\r\n+typedef Rgb = ({int r, int g, int b});\r\n+typedef Hsl = ({int h, double s, double l});\r\n \r\n extension ColorConversionExtension on Color {\r\n-  (int r, int g, int b) get rgb => (red, green, blue);\r\n+  Rgb get rgb => (r: red, g: green, b: blue);\r\n \r\n-  (int h, double s, double l) get hsl {\r\n+  Hsl get hsl {\r\n     var r = red / 255;\r\n     var g = green / 255;\r\n     var b = blue / 255;\r\n \r\n@@ -33,7 +34,7 @@\n \r\n     l = (colorMax + colorMin) / 2;\r\n     s = delta == 0 ? 0 : delta / (1 - (2 * l - 1).abs());\r\n \r\n-    return (h.round(), s, l);\r\n+    return (h.round(), s, ll);\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1700403012969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,41 @@\n+import \"dart:math\";\r\n+\r\n+import \"package:flutter/material.dart\";\r\n+\r\n+typedef Rgb = ({int r, int g, int b});\r\n+typedef Hsl = ({int h, double s, double l});\r\n+\r\n+extension ColorConversionExtension on Color {\r\n+  Rgb get rgb => (r: red, g: green, b: blue);\r\n+\r\n+  Hsl get hsl {\r\n+    var r = red / 255;\r\n+    var g = green / 255;\r\n+    var b = blue / 255;\r\n+\r\n+    var colorMin = [r, g, b].reduce(min);\r\n+    var colorMax = [r, g, b].reduce(max);\r\n+    var delta = colorMax - colorMin;\r\n+    var h = 0.0;\r\n+    var s = 0.0;\r\n+    var l = 0.0;\r\n+\r\n+    /// Compute the hue.\r\n+    if (delta == 0) {\r\n+      h = 0;\r\n+    } else if (colorMax == r) {\r\n+      h = 60 * (((g - b) / delta) % 6);\r\n+    } else if (colorMax == g) {\r\n+      h = 60 * (((b - r) / delta) + 2);\r\n+    } else if (colorMax == b) {\r\n+      h = 60 * (((r - g) / delta) + 4);\r\n+    }\r\n+    h %= 360;\r\n+\r\n+    l = (colorMax + colorMin) / 2;\r\n+    s = delta == 0 ? 0 : delta / (1 - (2 * l - 1).abs());\r\n+\r\n+    return (h: h.round(), s: s, l: l);\r\n+  }\r\n+}\r\n+\r\n"
                },
                {
                    "date": 1700403043069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,44 +38,31 @@\n     return (h: h.round(), s: s, l: l);\r\n   }\r\n }\r\n \r\n-import \"dart:math\";\r\n+extension HslMethods on Hsl {\r\n+  Rgb \r\n+  // function hslToRgb(h, s, l) {\r\n+  //   let r, g, b;\r\n \r\n-import \"package:flutter/material.dart\";\r\n+  //   if (s === 0) {\r\n+  //     r = g = b = l; // achromatic\r\n+  //   } else {\r\n+  //     const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n+  //     const p = 2 * l - q;\r\n+  //     r = hueToRgb(p, q, h + 1/3);\r\n+  //     g = hueToRgb(p, q, h);\r\n+  //     b = hueToRgb(p, q, h - 1/3);\r\n+  //   }\r\n \r\n-typedef Rgb = ({int r, int g, int b});\r\n-typedef Hsl = ({int h, double s, double l});\r\n+  //   return [round(r * 255), round(g * 255), round(b * 255)];\r\n+  // }\r\n \r\n-extension ColorConversionExtension on Color {\r\n-  Rgb get rgb => (r: red, g: green, b: blue);\r\n-\r\n-  Hsl get hsl {\r\n-    var r = red / 255;\r\n-    var g = green / 255;\r\n-    var b = blue / 255;\r\n-\r\n-    var colorMin = [r, g, b].reduce(min);\r\n-    var colorMax = [r, g, b].reduce(max);\r\n-    var delta = colorMax - colorMin;\r\n-    var h = 0.0;\r\n-    var s = 0.0;\r\n-    var l = 0.0;\r\n-\r\n-    /// Compute the hue.\r\n-    if (delta == 0) {\r\n-      h = 0;\r\n-    } else if (colorMax == r) {\r\n-      h = 60 * (((g - b) / delta) % 6);\r\n-    } else if (colorMax == g) {\r\n-      h = 60 * (((b - r) / delta) + 2);\r\n-    } else if (colorMax == b) {\r\n-      h = 60 * (((r - g) / delta) + 4);\r\n-    }\r\n-    h %= 360;\r\n-\r\n-    l = (colorMax + colorMin) / 2;\r\n-    s = delta == 0 ? 0 : delta / (1 - (2 * l - 1).abs());\r\n-\r\n-    return (h.round(), s, ll);\r\n-  }\r\n+  // function hueToRgb(p, q, t) {\r\n+  //   if (t < 0) t += 1;\r\n+  //   if (t > 1) t -= 1;\r\n+  //   if (t < 1/6) return p + (q - p) * 6 * t;\r\n+  //   if (t < 1/2) return q;\r\n+  //   if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;\r\n+  //   return p;\r\n+  // }\r\n }\r\n"
                },
                {
                    "date": 1700403073829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,17 @@\n   }\r\n }\r\n \r\n extension HslMethods on Hsl {\r\n-  Rgb \r\n+  Rgb get rgb {\r\n+    int r;\r\n+    int g;\r\n+    int b;\r\n+\r\n+    if (s == 0) {\r\n+      r = g = b = 1;\r\n+    } \r\n+  }\r\n   // function hslToRgb(h, s, l) {\r\n   //   let r, g, b;\r\n \r\n   //   if (s === 0) {\r\n"
                },
                {
                    "date": 1700403104060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,16 +40,29 @@\n }\r\n \r\n extension HslMethods on Hsl {\r\n   Rgb get rgb {\r\n-    int r;\r\n-    int g;\r\n-    int b;\r\n+    double r;\r\n+    double g;\r\n+    double b;\r\n \r\n     if (s == 0) {\r\n       r = g = b = 1;\r\n-    } \r\n+    } else {\r\n+      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n+      var p = 2 * l - q;\r\n+      r = _hueToRgb(p, q, h + 1 / 3);\r\n+      g = _hueToRgb(p, q, h);\r\n+      b = _hueToRgb(p, q, h - 1 / 3);\r\n+    }\r\n+\r\n+    return (\r\n+      r: (r * 255).,\r\n+      g: (g * 255).,\r\n+      b: (b * 255).,\r\n+    );\r\n   }\r\n+\r\n   // function hslToRgb(h, s, l) {\r\n   //   let r, g, b;\r\n \r\n   //   if (s === 0) {\r\n"
                },
                {
                    "date": 1700403135495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,30 +55,23 @@\n       b = _hueToRgb(p, q, h - 1 / 3);\r\n     }\r\n \r\n     return (\r\n-      r: (r * 255).,\r\n-      g: (g * 255).,\r\n-      b: (b * 255).,\r\n+      r: (r * 255).round(),\r\n+      g: (g * 255).round(),\r\n+      b: (b * 255).round(),\r\n     );\r\n   }\r\n \r\n-  // function hslToRgb(h, s, l) {\r\n-  //   let r, g, b;\r\n+  double hueToRgb(double p, double q, double t) {\r\n+    if (t < 0) {t += 1;}\r\n+    if (t > 1) t -= 1;\r\n+    if (t < 1 / 6) return p + (q - p) * 6 * t;\r\n+    if (t < 1 / 2) return q;\r\n+    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\r\n+    return p;\r\n+  }\r\n \r\n-  //   if (s === 0) {\r\n-  //     r = g = b = l; // achromatic\r\n-  //   } else {\r\n-  //     const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n-  //     const p = 2 * l - q;\r\n-  //     r = hueToRgb(p, q, h + 1/3);\r\n-  //     g = hueToRgb(p, q, h);\r\n-  //     b = hueToRgb(p, q, h - 1/3);\r\n-  //   }\r\n-\r\n-  //   return [round(r * 255), round(g * 255), round(b * 255)];\r\n-  // }\r\n-\r\n   // function hueToRgb(p, q, t) {\r\n   //   if (t < 0) t += 1;\r\n   //   if (t > 1) t -= 1;\r\n   //   if (t < 1/6) return p + (q - p) * 6 * t;\r\n"
                },
                {
                    "date": 1700403176541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+// ignore_for_file: parameter_assignments, always_put_control_body_on_new_line\r\n+\r\n import \"dart:math\";\r\n \r\n import \"package:flutter/material.dart\";\r\n \r\n@@ -40,8 +42,9 @@\n }\r\n \r\n extension HslMethods on Hsl {\r\n   Rgb get rgb {\r\n+    \r\n     double r;\r\n     double g;\r\n     double b;\r\n \r\n@@ -61,10 +64,10 @@\n       b: (b * 255).round(),\r\n     );\r\n   }\r\n \r\n-  double hueToRgb(double p, double q, double t) {\r\n-    if (t < 0) {t += 1;}\r\n+  double _hueToRgb(double p, double q, double t) {\r\n+    if (t < 0) t += 1;\r\n     if (t > 1) t -= 1;\r\n     if (t < 1 / 6) return p + (q - p) * 6 * t;\r\n     if (t < 1 / 2) return q;\r\n     if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\r\n"
                },
                {
                    "date": 1700403206712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,15 @@\n }\r\n \r\n extension HslMethods on Hsl {\r\n   Rgb get rgb {\r\n-    \r\n+\r\n+    var h = this.h / 360;\r\n+    var s = this.s;\r\n+    var l = this.l;\r\n+\r\n+    assert(0 <= h )\r\n+\r\n     double r;\r\n     double g;\r\n     double b;\r\n \r\n"
                },
                {
                    "date": 1700403272332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,14 +42,15 @@\n }\r\n \r\n extension HslMethods on Hsl {\r\n   Rgb get rgb {\r\n-\r\n     var h = this.h / 360;\r\n     var s = this.s;\r\n     var l = this.l;\r\n \r\n-    assert(0 <= h )\r\n+    assert(0 <= h && h <= 1, \"Hue must be between 0 and 1\");\r\n+    assert(0 <= s && s <= 1, \"Saturation must be between 0 and 1\");\r\n+    assert(0 <= l && l <= 1, \"Lightness must be between 0 and 1\");\r\n \r\n     double r;\r\n     double g;\r\n     double b;\r\n@@ -78,14 +79,5 @@\n     if (t < 1 / 2) return q;\r\n     if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\r\n     return p;\r\n   }\r\n-\r\n-  // function hueToRgb(p, q, t) {\r\n-  //   if (t < 0) t += 1;\r\n-  //   if (t > 1) t -= 1;\r\n-  //   if (t < 1/6) return p + (q - p) * 6 * t;\r\n-  //   if (t < 1/2) return q;\r\n-  //   if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;\r\n-  //   return p;\r\n-  // }\r\n }\r\n"
                },
                {
                    "date": 1700403304917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n   }\r\n }\r\n \r\n extension RgbMethods on Rgb {\r\n-  Hsl copyWith({int? h, double? s, double? l}) => (h: h ?? this.h, s: s ?? this.s, l: l ?? this.l);\r\n+  Rgb copyWith({int? h, double? s, double? l}) => (h: h ?? this.h, s: s ?? this.s, l: l ?? this.l);\r\n }\r\n \r\n extension HslMethods on Hsl {\r\n   Rgb get rgb {\r\n"
                },
                {
                    "date": 1700403341405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,119 @@\n+// ignore_for_file: parameter_assignments, always_put_control_body_on_new_line\r\n+\r\n+import \"dart:math\";\r\n+\r\n+import \"package:flutter/material.dart\";\r\n+\r\n+typedef Rgb = ({int r, int g, int b});\r\n+typedef Hsl = ({int h, double s, double l});\r\n+\r\n+extension ColorConversionExtension on Color {\r\n+  Rgb get rgb => (r: red, g: green, b: blue);\r\n+\r\n+  Hsl get hsl {\r\n+    var r = red / 255;\r\n+    var g = green / 255;\r\n+    var b = blue / 255;\r\n+\r\n+    var colorMin = [r, g, b].reduce(min);\r\n+    var colorMax = [r, g, b].reduce(max);\r\n+    var delta = colorMax - colorMin;\r\n+    var h = 0.0;\r\n+    var s = 0.0;\r\n+    var l = 0.0;\r\n+\r\n+    /// Compute the hue.\r\n+    if (delta == 0) {\r\n+      h = 0;\r\n+    } else if (colorMax == r) {\r\n+      h = 60 * (((g - b) / delta) % 6);\r\n+    } else if (colorMax == g) {\r\n+      h = 60 * (((b - r) / delta) + 2);\r\n+    } else if (colorMax == b) {\r\n+      h = 60 * (((r - g) / delta) + 4);\r\n+    }\r\n+    h %= 360;\r\n+\r\n+    l = (colorMax + colorMin) / 2;\r\n+    s = delta == 0 ? 0 : delta / (1 - (2 * l - 1).abs());\r\n+\r\n+    return (h: h.round(), s: s, l: l);\r\n+  }\r\n+}\r\n+\r\n+extension RgbMethods on Rgb {\r\n+  Hsl get hsl {\r\n+    var r = this / 255;\r\n+    var g = green / 255;\r\n+    var b = blue / 255;\r\n+\r\n+    var colorMin = [r, g, b].reduce(min);\r\n+    var colorMax = [r, g, b].reduce(max);\r\n+    var delta = colorMax - colorMin;\r\n+    var h = 0.0;\r\n+    var s = 0.0;\r\n+    var l = 0.0;\r\n+\r\n+    /// Compute the hue.\r\n+    if (delta == 0) {\r\n+      h = 0;\r\n+    } else if (colorMax == r) {\r\n+      h = 60 * (((g - b) / delta) % 6);\r\n+    } else if (colorMax == g) {\r\n+      h = 60 * (((b - r) / delta) + 2);\r\n+    } else if (colorMax == b) {\r\n+      h = 60 * (((r - g) / delta) + 4);\r\n+    }\r\n+    h %= 360;\r\n+\r\n+    l = (colorMax + colorMin) / 2;\r\n+    s = delta == 0 ? 0 : delta / (1 - (2 * l - 1).abs());\r\n+\r\n+    return (h: h.round(), s: s, l: l);\r\n+  }\r\n+\r\n+  Rgb copyWith({int? r, int? g, int? b}) => (r: r ?? this.r, g: g ?? this.g, b: b ?? this.b);\r\n+}\r\n+\r\n+extension HslMethods on Hsl {\r\n+  Rgb get rgb {\r\n+    var h = this.h / 360;\r\n+    var s = this.s;\r\n+    var l = this.l;\r\n+\r\n+    assert(0 <= h && h <= 1, \"Hue must be between 0 and 1\");\r\n+    assert(0 <= s && s <= 1, \"Saturation must be between 0 and 1\");\r\n+    assert(0 <= l && l <= 1, \"Lightness must be between 0 and 1\");\r\n+\r\n+    double r;\r\n+    double g;\r\n+    double b;\r\n+\r\n+    if (s == 0) {\r\n+      r = g = b = 1;\r\n+    } else {\r\n+      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n+      var p = 2 * l - q;\r\n+      r = _hueToRgb(p, q, h + 1 / 3);\r\n+      g = _hueToRgb(p, q, h);\r\n+      b = _hueToRgb(p, q, h - 1 / 3);\r\n+    }\r\n+\r\n+    return (\r\n+      r: (r * 255).round(),\r\n+      g: (g * 255).round(),\r\n+      b: (b * 255).round(),\r\n+    );\r\n+  }\r\n+\r\n+  double _hueToRgb(double p, double q, double t) {\r\n+    if (t < 0) t += 1;\r\n+    if (t > 1) t -= 1;\r\n+    if (t < 1 / 6) return p + (q - p) * 6 * t;\r\n+    if (t < 1 / 2) return q;\r\n+    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\r\n+    return p;\r\n+  }\r\n+\r\n+  Hsl copyWith({int? h, double? s, double? l}) => (h: h ?? this.h, s: s ?? this.s, l: l ?? this.l);\r\n+}\r\n"
                }
            ],
            "date": 1700402680808,
            "name": "Commit-0",
            "content": "e"
        }
    ]
}